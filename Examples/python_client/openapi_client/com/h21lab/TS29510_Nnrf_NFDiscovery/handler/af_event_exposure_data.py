# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AfEventExposureData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'af_events': 'list[AfEvent]',
        'af_ids': 'list[str]',
        'app_ids': 'list[str]'
    }

    attribute_map = {
        'af_events': 'afEvents',
        'af_ids': 'afIds',
        'app_ids': 'appIds'
    }

    def __init__(self, af_events=None, af_ids=None, app_ids=None, local_vars_configuration=None):  # noqa: E501
        """AfEventExposureData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._af_events = None
        self._af_ids = None
        self._app_ids = None
        self.discriminator = None

        self.af_events = af_events
        if af_ids is not None:
            self.af_ids = af_ids
        if app_ids is not None:
            self.app_ids = app_ids

    @property
    def af_events(self):
        """Gets the af_events of this AfEventExposureData.  # noqa: E501


        :return: The af_events of this AfEventExposureData.  # noqa: E501
        :rtype: list[AfEvent]
        """
        return self._af_events

    @af_events.setter
    def af_events(self, af_events):
        """Sets the af_events of this AfEventExposureData.


        :param af_events: The af_events of this AfEventExposureData.  # noqa: E501
        :type: list[AfEvent]
        """
        if self.local_vars_configuration.client_side_validation and af_events is None:  # noqa: E501
            raise ValueError("Invalid value for `af_events`, must not be `None`")  # noqa: E501

        self._af_events = af_events

    @property
    def af_ids(self):
        """Gets the af_ids of this AfEventExposureData.  # noqa: E501


        :return: The af_ids of this AfEventExposureData.  # noqa: E501
        :rtype: list[str]
        """
        return self._af_ids

    @af_ids.setter
    def af_ids(self, af_ids):
        """Sets the af_ids of this AfEventExposureData.


        :param af_ids: The af_ids of this AfEventExposureData.  # noqa: E501
        :type: list[str]
        """

        self._af_ids = af_ids

    @property
    def app_ids(self):
        """Gets the app_ids of this AfEventExposureData.  # noqa: E501


        :return: The app_ids of this AfEventExposureData.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_ids

    @app_ids.setter
    def app_ids(self, app_ids):
        """Sets the app_ids of this AfEventExposureData.


        :param app_ids: The app_ids of this AfEventExposureData.  # noqa: E501
        :type: list[str]
        """

        self._app_ids = app_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AfEventExposureData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AfEventExposureData):
            return True

        return self.to_dict() != other.to_dict()
