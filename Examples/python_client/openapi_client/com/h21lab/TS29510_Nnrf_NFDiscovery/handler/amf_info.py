# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AmfInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amf_set_id': 'str',
        'amf_region_id': 'str',
        'guami_list': 'list[Guami]',
        'tai_list': 'list[Tai]',
        'tai_range_list': 'list[TaiRange]',
        'backup_info_amf_failure': 'list[Guami]',
        'backup_info_amf_removal': 'list[Guami]',
        'n2_interface_amf_info': 'N2InterfaceAmfInfo'
    }

    attribute_map = {
        'amf_set_id': 'amfSetId',
        'amf_region_id': 'amfRegionId',
        'guami_list': 'guamiList',
        'tai_list': 'taiList',
        'tai_range_list': 'taiRangeList',
        'backup_info_amf_failure': 'backupInfoAmfFailure',
        'backup_info_amf_removal': 'backupInfoAmfRemoval',
        'n2_interface_amf_info': 'n2InterfaceAmfInfo'
    }

    def __init__(self, amf_set_id=None, amf_region_id=None, guami_list=None, tai_list=None, tai_range_list=None, backup_info_amf_failure=None, backup_info_amf_removal=None, n2_interface_amf_info=None, local_vars_configuration=None):  # noqa: E501
        """AmfInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amf_set_id = None
        self._amf_region_id = None
        self._guami_list = None
        self._tai_list = None
        self._tai_range_list = None
        self._backup_info_amf_failure = None
        self._backup_info_amf_removal = None
        self._n2_interface_amf_info = None
        self.discriminator = None

        self.amf_set_id = amf_set_id
        self.amf_region_id = amf_region_id
        self.guami_list = guami_list
        if tai_list is not None:
            self.tai_list = tai_list
        if tai_range_list is not None:
            self.tai_range_list = tai_range_list
        if backup_info_amf_failure is not None:
            self.backup_info_amf_failure = backup_info_amf_failure
        if backup_info_amf_removal is not None:
            self.backup_info_amf_removal = backup_info_amf_removal
        if n2_interface_amf_info is not None:
            self.n2_interface_amf_info = n2_interface_amf_info

    @property
    def amf_set_id(self):
        """Gets the amf_set_id of this AmfInfo.  # noqa: E501


        :return: The amf_set_id of this AmfInfo.  # noqa: E501
        :rtype: str
        """
        return self._amf_set_id

    @amf_set_id.setter
    def amf_set_id(self, amf_set_id):
        """Sets the amf_set_id of this AmfInfo.


        :param amf_set_id: The amf_set_id of this AmfInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and amf_set_id is None:  # noqa: E501
            raise ValueError("Invalid value for `amf_set_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                amf_set_id is not None and not re.search(r'^[0-3][A-Fa-f0-9]{2}$', amf_set_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `amf_set_id`, must be a follow pattern or equal to `/^[0-3][A-Fa-f0-9]{2}$/`")  # noqa: E501

        self._amf_set_id = amf_set_id

    @property
    def amf_region_id(self):
        """Gets the amf_region_id of this AmfInfo.  # noqa: E501


        :return: The amf_region_id of this AmfInfo.  # noqa: E501
        :rtype: str
        """
        return self._amf_region_id

    @amf_region_id.setter
    def amf_region_id(self, amf_region_id):
        """Sets the amf_region_id of this AmfInfo.


        :param amf_region_id: The amf_region_id of this AmfInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and amf_region_id is None:  # noqa: E501
            raise ValueError("Invalid value for `amf_region_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                amf_region_id is not None and not re.search(r'^[A-Fa-f0-9]{2}$', amf_region_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `amf_region_id`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{2}$/`")  # noqa: E501

        self._amf_region_id = amf_region_id

    @property
    def guami_list(self):
        """Gets the guami_list of this AmfInfo.  # noqa: E501


        :return: The guami_list of this AmfInfo.  # noqa: E501
        :rtype: list[Guami]
        """
        return self._guami_list

    @guami_list.setter
    def guami_list(self, guami_list):
        """Sets the guami_list of this AmfInfo.


        :param guami_list: The guami_list of this AmfInfo.  # noqa: E501
        :type: list[Guami]
        """
        if self.local_vars_configuration.client_side_validation and guami_list is None:  # noqa: E501
            raise ValueError("Invalid value for `guami_list`, must not be `None`")  # noqa: E501

        self._guami_list = guami_list

    @property
    def tai_list(self):
        """Gets the tai_list of this AmfInfo.  # noqa: E501


        :return: The tai_list of this AmfInfo.  # noqa: E501
        :rtype: list[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this AmfInfo.


        :param tai_list: The tai_list of this AmfInfo.  # noqa: E501
        :type: list[Tai]
        """

        self._tai_list = tai_list

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this AmfInfo.  # noqa: E501


        :return: The tai_range_list of this AmfInfo.  # noqa: E501
        :rtype: list[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this AmfInfo.


        :param tai_range_list: The tai_range_list of this AmfInfo.  # noqa: E501
        :type: list[TaiRange]
        """

        self._tai_range_list = tai_range_list

    @property
    def backup_info_amf_failure(self):
        """Gets the backup_info_amf_failure of this AmfInfo.  # noqa: E501


        :return: The backup_info_amf_failure of this AmfInfo.  # noqa: E501
        :rtype: list[Guami]
        """
        return self._backup_info_amf_failure

    @backup_info_amf_failure.setter
    def backup_info_amf_failure(self, backup_info_amf_failure):
        """Sets the backup_info_amf_failure of this AmfInfo.


        :param backup_info_amf_failure: The backup_info_amf_failure of this AmfInfo.  # noqa: E501
        :type: list[Guami]
        """

        self._backup_info_amf_failure = backup_info_amf_failure

    @property
    def backup_info_amf_removal(self):
        """Gets the backup_info_amf_removal of this AmfInfo.  # noqa: E501


        :return: The backup_info_amf_removal of this AmfInfo.  # noqa: E501
        :rtype: list[Guami]
        """
        return self._backup_info_amf_removal

    @backup_info_amf_removal.setter
    def backup_info_amf_removal(self, backup_info_amf_removal):
        """Sets the backup_info_amf_removal of this AmfInfo.


        :param backup_info_amf_removal: The backup_info_amf_removal of this AmfInfo.  # noqa: E501
        :type: list[Guami]
        """

        self._backup_info_amf_removal = backup_info_amf_removal

    @property
    def n2_interface_amf_info(self):
        """Gets the n2_interface_amf_info of this AmfInfo.  # noqa: E501


        :return: The n2_interface_amf_info of this AmfInfo.  # noqa: E501
        :rtype: N2InterfaceAmfInfo
        """
        return self._n2_interface_amf_info

    @n2_interface_amf_info.setter
    def n2_interface_amf_info(self, n2_interface_amf_info):
        """Sets the n2_interface_amf_info of this AmfInfo.


        :param n2_interface_amf_info: The n2_interface_amf_info of this AmfInfo.  # noqa: E501
        :type: N2InterfaceAmfInfo
        """

        self._n2_interface_amf_info = n2_interface_amf_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmfInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AmfInfo):
            return True

        return self.to_dict() != other.to_dict()
