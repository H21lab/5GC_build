# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ChfInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'supi_range_list': 'list[SupiRange]',
        'gpsi_range_list': 'list[IdentityRange]',
        'plmn_range_list': 'list[PlmnRange]',
        'group_id': 'str'
    }

    attribute_map = {
        'supi_range_list': 'supiRangeList',
        'gpsi_range_list': 'gpsiRangeList',
        'plmn_range_list': 'plmnRangeList',
        'group_id': 'groupId'
    }

    def __init__(self, supi_range_list=None, gpsi_range_list=None, plmn_range_list=None, group_id=None, local_vars_configuration=None):  # noqa: E501
        """ChfInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._supi_range_list = None
        self._gpsi_range_list = None
        self._plmn_range_list = None
        self._group_id = None
        self.discriminator = None

        if supi_range_list is not None:
            self.supi_range_list = supi_range_list
        if gpsi_range_list is not None:
            self.gpsi_range_list = gpsi_range_list
        if plmn_range_list is not None:
            self.plmn_range_list = plmn_range_list
        if group_id is not None:
            self.group_id = group_id

    @property
    def supi_range_list(self):
        """Gets the supi_range_list of this ChfInfo.  # noqa: E501


        :return: The supi_range_list of this ChfInfo.  # noqa: E501
        :rtype: list[SupiRange]
        """
        return self._supi_range_list

    @supi_range_list.setter
    def supi_range_list(self, supi_range_list):
        """Sets the supi_range_list of this ChfInfo.


        :param supi_range_list: The supi_range_list of this ChfInfo.  # noqa: E501
        :type: list[SupiRange]
        """

        self._supi_range_list = supi_range_list

    @property
    def gpsi_range_list(self):
        """Gets the gpsi_range_list of this ChfInfo.  # noqa: E501


        :return: The gpsi_range_list of this ChfInfo.  # noqa: E501
        :rtype: list[IdentityRange]
        """
        return self._gpsi_range_list

    @gpsi_range_list.setter
    def gpsi_range_list(self, gpsi_range_list):
        """Sets the gpsi_range_list of this ChfInfo.


        :param gpsi_range_list: The gpsi_range_list of this ChfInfo.  # noqa: E501
        :type: list[IdentityRange]
        """

        self._gpsi_range_list = gpsi_range_list

    @property
    def plmn_range_list(self):
        """Gets the plmn_range_list of this ChfInfo.  # noqa: E501


        :return: The plmn_range_list of this ChfInfo.  # noqa: E501
        :rtype: list[PlmnRange]
        """
        return self._plmn_range_list

    @plmn_range_list.setter
    def plmn_range_list(self, plmn_range_list):
        """Sets the plmn_range_list of this ChfInfo.


        :param plmn_range_list: The plmn_range_list of this ChfInfo.  # noqa: E501
        :type: list[PlmnRange]
        """

        self._plmn_range_list = plmn_range_list

    @property
    def group_id(self):
        """Gets the group_id of this ChfInfo.  # noqa: E501


        :return: The group_id of this ChfInfo.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ChfInfo.


        :param group_id: The group_id of this ChfInfo.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChfInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChfInfo):
            return True

        return self.to_dict() != other.to_dict()
