# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ChfServiceInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'primary_chf_service_instance': 'str',
        'secondary_chf_service_instance': 'str'
    }

    attribute_map = {
        'primary_chf_service_instance': 'primaryChfServiceInstance',
        'secondary_chf_service_instance': 'secondaryChfServiceInstance'
    }

    def __init__(self, primary_chf_service_instance=None, secondary_chf_service_instance=None, local_vars_configuration=None):  # noqa: E501
        """ChfServiceInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._primary_chf_service_instance = None
        self._secondary_chf_service_instance = None
        self.discriminator = None

        if primary_chf_service_instance is not None:
            self.primary_chf_service_instance = primary_chf_service_instance
        if secondary_chf_service_instance is not None:
            self.secondary_chf_service_instance = secondary_chf_service_instance

    @property
    def primary_chf_service_instance(self):
        """Gets the primary_chf_service_instance of this ChfServiceInfo.  # noqa: E501


        :return: The primary_chf_service_instance of this ChfServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._primary_chf_service_instance

    @primary_chf_service_instance.setter
    def primary_chf_service_instance(self, primary_chf_service_instance):
        """Sets the primary_chf_service_instance of this ChfServiceInfo.


        :param primary_chf_service_instance: The primary_chf_service_instance of this ChfServiceInfo.  # noqa: E501
        :type: str
        """

        self._primary_chf_service_instance = primary_chf_service_instance

    @property
    def secondary_chf_service_instance(self):
        """Gets the secondary_chf_service_instance of this ChfServiceInfo.  # noqa: E501


        :return: The secondary_chf_service_instance of this ChfServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._secondary_chf_service_instance

    @secondary_chf_service_instance.setter
    def secondary_chf_service_instance(self, secondary_chf_service_instance):
        """Sets the secondary_chf_service_instance of this ChfServiceInfo.


        :param secondary_chf_service_instance: The secondary_chf_service_instance of this ChfServiceInfo.  # noqa: E501
        :type: str
        """

        self._secondary_chf_service_instance = secondary_chf_service_instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChfServiceInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChfServiceInfo):
            return True

        return self.to_dict() != other.to_dict()
