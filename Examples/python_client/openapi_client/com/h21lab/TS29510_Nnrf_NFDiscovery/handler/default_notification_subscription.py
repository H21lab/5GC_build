# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DefaultNotificationSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'notification_type': 'NotificationType',
        'callback_uri': 'str',
        'n1_message_class': 'N1MessageClass',
        'n2_information_class': 'N2InformationClass',
        'versions': 'list[str]'
    }

    attribute_map = {
        'notification_type': 'notificationType',
        'callback_uri': 'callbackUri',
        'n1_message_class': 'n1MessageClass',
        'n2_information_class': 'n2InformationClass',
        'versions': 'versions'
    }

    def __init__(self, notification_type=None, callback_uri=None, n1_message_class=None, n2_information_class=None, versions=None, local_vars_configuration=None):  # noqa: E501
        """DefaultNotificationSubscription - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._notification_type = None
        self._callback_uri = None
        self._n1_message_class = None
        self._n2_information_class = None
        self._versions = None
        self.discriminator = None

        self.notification_type = notification_type
        self.callback_uri = callback_uri
        if n1_message_class is not None:
            self.n1_message_class = n1_message_class
        if n2_information_class is not None:
            self.n2_information_class = n2_information_class
        if versions is not None:
            self.versions = versions

    @property
    def notification_type(self):
        """Gets the notification_type of this DefaultNotificationSubscription.  # noqa: E501


        :return: The notification_type of this DefaultNotificationSubscription.  # noqa: E501
        :rtype: NotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this DefaultNotificationSubscription.


        :param notification_type: The notification_type of this DefaultNotificationSubscription.  # noqa: E501
        :type: NotificationType
        """
        if self.local_vars_configuration.client_side_validation and notification_type is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def callback_uri(self):
        """Gets the callback_uri of this DefaultNotificationSubscription.  # noqa: E501


        :return: The callback_uri of this DefaultNotificationSubscription.  # noqa: E501
        :rtype: str
        """
        return self._callback_uri

    @callback_uri.setter
    def callback_uri(self, callback_uri):
        """Sets the callback_uri of this DefaultNotificationSubscription.


        :param callback_uri: The callback_uri of this DefaultNotificationSubscription.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and callback_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `callback_uri`, must not be `None`")  # noqa: E501

        self._callback_uri = callback_uri

    @property
    def n1_message_class(self):
        """Gets the n1_message_class of this DefaultNotificationSubscription.  # noqa: E501


        :return: The n1_message_class of this DefaultNotificationSubscription.  # noqa: E501
        :rtype: N1MessageClass
        """
        return self._n1_message_class

    @n1_message_class.setter
    def n1_message_class(self, n1_message_class):
        """Sets the n1_message_class of this DefaultNotificationSubscription.


        :param n1_message_class: The n1_message_class of this DefaultNotificationSubscription.  # noqa: E501
        :type: N1MessageClass
        """

        self._n1_message_class = n1_message_class

    @property
    def n2_information_class(self):
        """Gets the n2_information_class of this DefaultNotificationSubscription.  # noqa: E501


        :return: The n2_information_class of this DefaultNotificationSubscription.  # noqa: E501
        :rtype: N2InformationClass
        """
        return self._n2_information_class

    @n2_information_class.setter
    def n2_information_class(self, n2_information_class):
        """Sets the n2_information_class of this DefaultNotificationSubscription.


        :param n2_information_class: The n2_information_class of this DefaultNotificationSubscription.  # noqa: E501
        :type: N2InformationClass
        """

        self._n2_information_class = n2_information_class

    @property
    def versions(self):
        """Gets the versions of this DefaultNotificationSubscription.  # noqa: E501


        :return: The versions of this DefaultNotificationSubscription.  # noqa: E501
        :rtype: list[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DefaultNotificationSubscription.


        :param versions: The versions of this DefaultNotificationSubscription.  # noqa: E501
        :type: list[str]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefaultNotificationSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DefaultNotificationSubscription):
            return True

        return self.to_dict() != other.to_dict()
