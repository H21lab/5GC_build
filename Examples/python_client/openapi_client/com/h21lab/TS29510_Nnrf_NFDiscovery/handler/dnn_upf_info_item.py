# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DnnUpfInfoItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dnn': 'str',
        'dnai_list': 'list[str]',
        'pdu_session_types': 'list[PduSessionType]',
        'ipv4_address_ranges': 'list[Ipv4AddressRange]',
        'ipv6_prefix_ranges': 'list[Ipv6PrefixRange]'
    }

    attribute_map = {
        'dnn': 'dnn',
        'dnai_list': 'dnaiList',
        'pdu_session_types': 'pduSessionTypes',
        'ipv4_address_ranges': 'ipv4AddressRanges',
        'ipv6_prefix_ranges': 'ipv6PrefixRanges'
    }

    def __init__(self, dnn=None, dnai_list=None, pdu_session_types=None, ipv4_address_ranges=None, ipv6_prefix_ranges=None, local_vars_configuration=None):  # noqa: E501
        """DnnUpfInfoItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dnn = None
        self._dnai_list = None
        self._pdu_session_types = None
        self._ipv4_address_ranges = None
        self._ipv6_prefix_ranges = None
        self.discriminator = None

        self.dnn = dnn
        if dnai_list is not None:
            self.dnai_list = dnai_list
        if pdu_session_types is not None:
            self.pdu_session_types = pdu_session_types
        if ipv4_address_ranges is not None:
            self.ipv4_address_ranges = ipv4_address_ranges
        if ipv6_prefix_ranges is not None:
            self.ipv6_prefix_ranges = ipv6_prefix_ranges

    @property
    def dnn(self):
        """Gets the dnn of this DnnUpfInfoItem.  # noqa: E501


        :return: The dnn of this DnnUpfInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this DnnUpfInfoItem.


        :param dnn: The dnn of this DnnUpfInfoItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dnn is None:  # noqa: E501
            raise ValueError("Invalid value for `dnn`, must not be `None`")  # noqa: E501

        self._dnn = dnn

    @property
    def dnai_list(self):
        """Gets the dnai_list of this DnnUpfInfoItem.  # noqa: E501


        :return: The dnai_list of this DnnUpfInfoItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._dnai_list

    @dnai_list.setter
    def dnai_list(self, dnai_list):
        """Sets the dnai_list of this DnnUpfInfoItem.


        :param dnai_list: The dnai_list of this DnnUpfInfoItem.  # noqa: E501
        :type: list[str]
        """

        self._dnai_list = dnai_list

    @property
    def pdu_session_types(self):
        """Gets the pdu_session_types of this DnnUpfInfoItem.  # noqa: E501


        :return: The pdu_session_types of this DnnUpfInfoItem.  # noqa: E501
        :rtype: list[PduSessionType]
        """
        return self._pdu_session_types

    @pdu_session_types.setter
    def pdu_session_types(self, pdu_session_types):
        """Sets the pdu_session_types of this DnnUpfInfoItem.


        :param pdu_session_types: The pdu_session_types of this DnnUpfInfoItem.  # noqa: E501
        :type: list[PduSessionType]
        """

        self._pdu_session_types = pdu_session_types

    @property
    def ipv4_address_ranges(self):
        """Gets the ipv4_address_ranges of this DnnUpfInfoItem.  # noqa: E501


        :return: The ipv4_address_ranges of this DnnUpfInfoItem.  # noqa: E501
        :rtype: list[Ipv4AddressRange]
        """
        return self._ipv4_address_ranges

    @ipv4_address_ranges.setter
    def ipv4_address_ranges(self, ipv4_address_ranges):
        """Sets the ipv4_address_ranges of this DnnUpfInfoItem.


        :param ipv4_address_ranges: The ipv4_address_ranges of this DnnUpfInfoItem.  # noqa: E501
        :type: list[Ipv4AddressRange]
        """

        self._ipv4_address_ranges = ipv4_address_ranges

    @property
    def ipv6_prefix_ranges(self):
        """Gets the ipv6_prefix_ranges of this DnnUpfInfoItem.  # noqa: E501


        :return: The ipv6_prefix_ranges of this DnnUpfInfoItem.  # noqa: E501
        :rtype: list[Ipv6PrefixRange]
        """
        return self._ipv6_prefix_ranges

    @ipv6_prefix_ranges.setter
    def ipv6_prefix_ranges(self, ipv6_prefix_ranges):
        """Sets the ipv6_prefix_ranges of this DnnUpfInfoItem.


        :param ipv6_prefix_ranges: The ipv6_prefix_ranges of this DnnUpfInfoItem.  # noqa: E501
        :type: list[Ipv6PrefixRange]
        """

        self._ipv6_prefix_ranges = ipv6_prefix_ranges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnnUpfInfoItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DnnUpfInfoItem):
            return True

        return self.to_dict() != other.to_dict()
