# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class IpEndPoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ipv4_address': 'str',
        'ipv6_address': 'Ipv6Addr',
        'transport': 'TransportProtocol',
        'port': 'int'
    }

    attribute_map = {
        'ipv4_address': 'ipv4Address',
        'ipv6_address': 'ipv6Address',
        'transport': 'transport',
        'port': 'port'
    }

    def __init__(self, ipv4_address=None, ipv6_address=None, transport=None, port=None, local_vars_configuration=None):  # noqa: E501
        """IpEndPoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ipv4_address = None
        self._ipv6_address = None
        self._transport = None
        self._port = None
        self.discriminator = None

        if ipv4_address is not None:
            self.ipv4_address = ipv4_address
        if ipv6_address is not None:
            self.ipv6_address = ipv6_address
        if transport is not None:
            self.transport = transport
        if port is not None:
            self.port = port

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this IpEndPoint.  # noqa: E501


        :return: The ipv4_address of this IpEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this IpEndPoint.


        :param ipv4_address: The ipv4_address of this IpEndPoint.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ipv4_address is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ipv4_address)):  # noqa: E501
            raise ValueError(r"Invalid value for `ipv4_address`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._ipv4_address = ipv4_address

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this IpEndPoint.  # noqa: E501


        :return: The ipv6_address of this IpEndPoint.  # noqa: E501
        :rtype: Ipv6Addr
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this IpEndPoint.


        :param ipv6_address: The ipv6_address of this IpEndPoint.  # noqa: E501
        :type: Ipv6Addr
        """

        self._ipv6_address = ipv6_address

    @property
    def transport(self):
        """Gets the transport of this IpEndPoint.  # noqa: E501


        :return: The transport of this IpEndPoint.  # noqa: E501
        :rtype: TransportProtocol
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this IpEndPoint.


        :param transport: The transport of this IpEndPoint.  # noqa: E501
        :type: TransportProtocol
        """

        self._transport = transport

    @property
    def port(self):
        """Gets the port of this IpEndPoint.  # noqa: E501


        :return: The port of this IpEndPoint.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IpEndPoint.


        :param port: The port of this IpEndPoint.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                port is not None and port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpEndPoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IpEndPoint):
            return True

        return self.to_dict() != other.to_dict()
