# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LmfInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'serving_client_types': 'list[ExternalClientType]',
        'lmf_id': 'str',
        'serving_access_types': 'list[AccessType]',
        'serving_an_node_types': 'list[AnNodeType]',
        'serving_rat_types': 'list[RatType]'
    }

    attribute_map = {
        'serving_client_types': 'servingClientTypes',
        'lmf_id': 'lmfId',
        'serving_access_types': 'servingAccessTypes',
        'serving_an_node_types': 'servingAnNodeTypes',
        'serving_rat_types': 'servingRatTypes'
    }

    def __init__(self, serving_client_types=None, lmf_id=None, serving_access_types=None, serving_an_node_types=None, serving_rat_types=None, local_vars_configuration=None):  # noqa: E501
        """LmfInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._serving_client_types = None
        self._lmf_id = None
        self._serving_access_types = None
        self._serving_an_node_types = None
        self._serving_rat_types = None
        self.discriminator = None

        if serving_client_types is not None:
            self.serving_client_types = serving_client_types
        if lmf_id is not None:
            self.lmf_id = lmf_id
        if serving_access_types is not None:
            self.serving_access_types = serving_access_types
        if serving_an_node_types is not None:
            self.serving_an_node_types = serving_an_node_types
        if serving_rat_types is not None:
            self.serving_rat_types = serving_rat_types

    @property
    def serving_client_types(self):
        """Gets the serving_client_types of this LmfInfo.  # noqa: E501


        :return: The serving_client_types of this LmfInfo.  # noqa: E501
        :rtype: list[ExternalClientType]
        """
        return self._serving_client_types

    @serving_client_types.setter
    def serving_client_types(self, serving_client_types):
        """Sets the serving_client_types of this LmfInfo.


        :param serving_client_types: The serving_client_types of this LmfInfo.  # noqa: E501
        :type: list[ExternalClientType]
        """

        self._serving_client_types = serving_client_types

    @property
    def lmf_id(self):
        """Gets the lmf_id of this LmfInfo.  # noqa: E501


        :return: The lmf_id of this LmfInfo.  # noqa: E501
        :rtype: str
        """
        return self._lmf_id

    @lmf_id.setter
    def lmf_id(self, lmf_id):
        """Sets the lmf_id of this LmfInfo.


        :param lmf_id: The lmf_id of this LmfInfo.  # noqa: E501
        :type: str
        """

        self._lmf_id = lmf_id

    @property
    def serving_access_types(self):
        """Gets the serving_access_types of this LmfInfo.  # noqa: E501


        :return: The serving_access_types of this LmfInfo.  # noqa: E501
        :rtype: list[AccessType]
        """
        return self._serving_access_types

    @serving_access_types.setter
    def serving_access_types(self, serving_access_types):
        """Sets the serving_access_types of this LmfInfo.


        :param serving_access_types: The serving_access_types of this LmfInfo.  # noqa: E501
        :type: list[AccessType]
        """

        self._serving_access_types = serving_access_types

    @property
    def serving_an_node_types(self):
        """Gets the serving_an_node_types of this LmfInfo.  # noqa: E501


        :return: The serving_an_node_types of this LmfInfo.  # noqa: E501
        :rtype: list[AnNodeType]
        """
        return self._serving_an_node_types

    @serving_an_node_types.setter
    def serving_an_node_types(self, serving_an_node_types):
        """Sets the serving_an_node_types of this LmfInfo.


        :param serving_an_node_types: The serving_an_node_types of this LmfInfo.  # noqa: E501
        :type: list[AnNodeType]
        """

        self._serving_an_node_types = serving_an_node_types

    @property
    def serving_rat_types(self):
        """Gets the serving_rat_types of this LmfInfo.  # noqa: E501


        :return: The serving_rat_types of this LmfInfo.  # noqa: E501
        :rtype: list[RatType]
        """
        return self._serving_rat_types

    @serving_rat_types.setter
    def serving_rat_types(self, serving_rat_types):
        """Sets the serving_rat_types of this LmfInfo.


        :param serving_rat_types: The serving_rat_types of this LmfInfo.  # noqa: E501
        :type: list[RatType]
        """

        self._serving_rat_types = serving_rat_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LmfInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LmfInfo):
            return True

        return self.to_dict() != other.to_dict()
