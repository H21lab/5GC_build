# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class NefInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nef_id': 'str',
        'pfd_data': 'PfdData',
        'af_ee_data': 'AfEventExposureData'
    }

    attribute_map = {
        'nef_id': 'nefId',
        'pfd_data': 'pfdData',
        'af_ee_data': 'afEeData'
    }

    def __init__(self, nef_id=None, pfd_data=None, af_ee_data=None, local_vars_configuration=None):  # noqa: E501
        """NefInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._nef_id = None
        self._pfd_data = None
        self._af_ee_data = None
        self.discriminator = None

        if nef_id is not None:
            self.nef_id = nef_id
        if pfd_data is not None:
            self.pfd_data = pfd_data
        if af_ee_data is not None:
            self.af_ee_data = af_ee_data

    @property
    def nef_id(self):
        """Gets the nef_id of this NefInfo.  # noqa: E501

        Identity of the NEF  # noqa: E501

        :return: The nef_id of this NefInfo.  # noqa: E501
        :rtype: str
        """
        return self._nef_id

    @nef_id.setter
    def nef_id(self, nef_id):
        """Sets the nef_id of this NefInfo.

        Identity of the NEF  # noqa: E501

        :param nef_id: The nef_id of this NefInfo.  # noqa: E501
        :type: str
        """

        self._nef_id = nef_id

    @property
    def pfd_data(self):
        """Gets the pfd_data of this NefInfo.  # noqa: E501


        :return: The pfd_data of this NefInfo.  # noqa: E501
        :rtype: PfdData
        """
        return self._pfd_data

    @pfd_data.setter
    def pfd_data(self, pfd_data):
        """Sets the pfd_data of this NefInfo.


        :param pfd_data: The pfd_data of this NefInfo.  # noqa: E501
        :type: PfdData
        """

        self._pfd_data = pfd_data

    @property
    def af_ee_data(self):
        """Gets the af_ee_data of this NefInfo.  # noqa: E501


        :return: The af_ee_data of this NefInfo.  # noqa: E501
        :rtype: AfEventExposureData
        """
        return self._af_ee_data

    @af_ee_data.setter
    def af_ee_data(self, af_ee_data):
        """Sets the af_ee_data of this NefInfo.


        :param af_ee_data: The af_ee_data of this NefInfo.  # noqa: E501
        :type: AfEventExposureData
        """

        self._af_ee_data = af_ee_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NefInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NefInfo):
            return True

        return self.to_dict() != other.to_dict()
