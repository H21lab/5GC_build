# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class NFProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nf_instance_id': 'str',
        'nf_instance_name': 'str',
        'nf_type': 'NFType',
        'nf_status': 'NFStatus',
        'plmn_list': 'list[PlmnId]',
        's_nssais': 'list[Snssai]',
        'per_plmn_snssai_list': 'list[PlmnSnssai]',
        'nsi_list': 'list[str]',
        'fqdn': 'str',
        'ipv4_addresses': 'list[str]',
        'ipv6_addresses': 'list[Ipv6Addr]',
        'capacity': 'int',
        'load': 'int',
        'load_time_stamp': 'datetime',
        'locality': 'str',
        'priority': 'int',
        'udr_info': 'UdrInfo',
        'udr_info_ext': 'list[UdrInfo]',
        'udm_info': 'UdmInfo',
        'udm_info_ext': 'list[UdmInfo]',
        'ausf_info': 'AusfInfo',
        'ausf_info_ext': 'list[AusfInfo]',
        'amf_info': 'AmfInfo',
        'amf_info_ext': 'list[AmfInfo]',
        'smf_info': 'SmfInfo',
        'smf_info_ext': 'list[SmfInfo]',
        'upf_info': 'UpfInfo',
        'upf_info_ext': 'list[UpfInfo]',
        'pcf_info': 'PcfInfo',
        'pcf_info_ext': 'list[PcfInfo]',
        'bsf_info': 'BsfInfo',
        'bsf_info_ext': 'list[BsfInfo]',
        'chf_info': 'ChfInfo',
        'chf_info_ext': 'list[ChfInfo]',
        'udsf_info': 'UdsfInfo',
        'udsf_info_ext': 'list[UdsfInfo]',
        'nwdaf_info': 'NwdafInfo',
        'nef_info': 'NefInfo',
        'pcscf_info': 'list[PcscfInfo]',
        'hss_info': 'list[HssInfo]',
        'custom_info': 'object',
        'recovery_time': 'datetime',
        'nf_service_persistence': 'bool',
        'nf_services': 'list[NFService]',
        'default_notification_subscriptions': 'list[DefaultNotificationSubscription]',
        'lmf_info': 'LmfInfo',
        'gmlc_info': 'GmlcInfo',
        'snpn_list': 'list[PlmnIdNid]',
        'nf_set_id_list': 'list[str]',
        'serving_scope': 'list[str]',
        'lc_h_support_ind': 'bool',
        'olc_h_support_ind': 'bool'
    }

    attribute_map = {
        'nf_instance_id': 'nfInstanceId',
        'nf_instance_name': 'nfInstanceName',
        'nf_type': 'nfType',
        'nf_status': 'nfStatus',
        'plmn_list': 'plmnList',
        's_nssais': 'sNssais',
        'per_plmn_snssai_list': 'perPlmnSnssaiList',
        'nsi_list': 'nsiList',
        'fqdn': 'fqdn',
        'ipv4_addresses': 'ipv4Addresses',
        'ipv6_addresses': 'ipv6Addresses',
        'capacity': 'capacity',
        'load': 'load',
        'load_time_stamp': 'loadTimeStamp',
        'locality': 'locality',
        'priority': 'priority',
        'udr_info': 'udrInfo',
        'udr_info_ext': 'udrInfoExt',
        'udm_info': 'udmInfo',
        'udm_info_ext': 'udmInfoExt',
        'ausf_info': 'ausfInfo',
        'ausf_info_ext': 'ausfInfoExt',
        'amf_info': 'amfInfo',
        'amf_info_ext': 'amfInfoExt',
        'smf_info': 'smfInfo',
        'smf_info_ext': 'smfInfoExt',
        'upf_info': 'upfInfo',
        'upf_info_ext': 'upfInfoExt',
        'pcf_info': 'pcfInfo',
        'pcf_info_ext': 'pcfInfoExt',
        'bsf_info': 'bsfInfo',
        'bsf_info_ext': 'bsfInfoExt',
        'chf_info': 'chfInfo',
        'chf_info_ext': 'chfInfoExt',
        'udsf_info': 'udsfInfo',
        'udsf_info_ext': 'udsfInfoExt',
        'nwdaf_info': 'nwdafInfo',
        'nef_info': 'nefInfo',
        'pcscf_info': 'pcscfInfo',
        'hss_info': 'hssInfo',
        'custom_info': 'customInfo',
        'recovery_time': 'recoveryTime',
        'nf_service_persistence': 'nfServicePersistence',
        'nf_services': 'nfServices',
        'default_notification_subscriptions': 'defaultNotificationSubscriptions',
        'lmf_info': 'lmfInfo',
        'gmlc_info': 'gmlcInfo',
        'snpn_list': 'snpnList',
        'nf_set_id_list': 'nfSetIdList',
        'serving_scope': 'servingScope',
        'lc_h_support_ind': 'lcHSupportInd',
        'olc_h_support_ind': 'olcHSupportInd'
    }

    def __init__(self, nf_instance_id=None, nf_instance_name=None, nf_type=None, nf_status=None, plmn_list=None, s_nssais=None, per_plmn_snssai_list=None, nsi_list=None, fqdn=None, ipv4_addresses=None, ipv6_addresses=None, capacity=None, load=None, load_time_stamp=None, locality=None, priority=None, udr_info=None, udr_info_ext=None, udm_info=None, udm_info_ext=None, ausf_info=None, ausf_info_ext=None, amf_info=None, amf_info_ext=None, smf_info=None, smf_info_ext=None, upf_info=None, upf_info_ext=None, pcf_info=None, pcf_info_ext=None, bsf_info=None, bsf_info_ext=None, chf_info=None, chf_info_ext=None, udsf_info=None, udsf_info_ext=None, nwdaf_info=None, nef_info=None, pcscf_info=None, hss_info=None, custom_info=None, recovery_time=None, nf_service_persistence=False, nf_services=None, default_notification_subscriptions=None, lmf_info=None, gmlc_info=None, snpn_list=None, nf_set_id_list=None, serving_scope=None, lc_h_support_ind=False, olc_h_support_ind=False, local_vars_configuration=None):  # noqa: E501
        """NFProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._nf_instance_id = None
        self._nf_instance_name = None
        self._nf_type = None
        self._nf_status = None
        self._plmn_list = None
        self._s_nssais = None
        self._per_plmn_snssai_list = None
        self._nsi_list = None
        self._fqdn = None
        self._ipv4_addresses = None
        self._ipv6_addresses = None
        self._capacity = None
        self._load = None
        self._load_time_stamp = None
        self._locality = None
        self._priority = None
        self._udr_info = None
        self._udr_info_ext = None
        self._udm_info = None
        self._udm_info_ext = None
        self._ausf_info = None
        self._ausf_info_ext = None
        self._amf_info = None
        self._amf_info_ext = None
        self._smf_info = None
        self._smf_info_ext = None
        self._upf_info = None
        self._upf_info_ext = None
        self._pcf_info = None
        self._pcf_info_ext = None
        self._bsf_info = None
        self._bsf_info_ext = None
        self._chf_info = None
        self._chf_info_ext = None
        self._udsf_info = None
        self._udsf_info_ext = None
        self._nwdaf_info = None
        self._nef_info = None
        self._pcscf_info = None
        self._hss_info = None
        self._custom_info = None
        self._recovery_time = None
        self._nf_service_persistence = None
        self._nf_services = None
        self._default_notification_subscriptions = None
        self._lmf_info = None
        self._gmlc_info = None
        self._snpn_list = None
        self._nf_set_id_list = None
        self._serving_scope = None
        self._lc_h_support_ind = None
        self._olc_h_support_ind = None
        self.discriminator = None

        self.nf_instance_id = nf_instance_id
        if nf_instance_name is not None:
            self.nf_instance_name = nf_instance_name
        self.nf_type = nf_type
        self.nf_status = nf_status
        if plmn_list is not None:
            self.plmn_list = plmn_list
        if s_nssais is not None:
            self.s_nssais = s_nssais
        if per_plmn_snssai_list is not None:
            self.per_plmn_snssai_list = per_plmn_snssai_list
        if nsi_list is not None:
            self.nsi_list = nsi_list
        if fqdn is not None:
            self.fqdn = fqdn
        if ipv4_addresses is not None:
            self.ipv4_addresses = ipv4_addresses
        if ipv6_addresses is not None:
            self.ipv6_addresses = ipv6_addresses
        if capacity is not None:
            self.capacity = capacity
        if load is not None:
            self.load = load
        if load_time_stamp is not None:
            self.load_time_stamp = load_time_stamp
        if locality is not None:
            self.locality = locality
        if priority is not None:
            self.priority = priority
        if udr_info is not None:
            self.udr_info = udr_info
        if udr_info_ext is not None:
            self.udr_info_ext = udr_info_ext
        if udm_info is not None:
            self.udm_info = udm_info
        if udm_info_ext is not None:
            self.udm_info_ext = udm_info_ext
        if ausf_info is not None:
            self.ausf_info = ausf_info
        if ausf_info_ext is not None:
            self.ausf_info_ext = ausf_info_ext
        if amf_info is not None:
            self.amf_info = amf_info
        if amf_info_ext is not None:
            self.amf_info_ext = amf_info_ext
        if smf_info is not None:
            self.smf_info = smf_info
        if smf_info_ext is not None:
            self.smf_info_ext = smf_info_ext
        if upf_info is not None:
            self.upf_info = upf_info
        if upf_info_ext is not None:
            self.upf_info_ext = upf_info_ext
        if pcf_info is not None:
            self.pcf_info = pcf_info
        if pcf_info_ext is not None:
            self.pcf_info_ext = pcf_info_ext
        if bsf_info is not None:
            self.bsf_info = bsf_info
        if bsf_info_ext is not None:
            self.bsf_info_ext = bsf_info_ext
        if chf_info is not None:
            self.chf_info = chf_info
        if chf_info_ext is not None:
            self.chf_info_ext = chf_info_ext
        if udsf_info is not None:
            self.udsf_info = udsf_info
        if udsf_info_ext is not None:
            self.udsf_info_ext = udsf_info_ext
        if nwdaf_info is not None:
            self.nwdaf_info = nwdaf_info
        if nef_info is not None:
            self.nef_info = nef_info
        if pcscf_info is not None:
            self.pcscf_info = pcscf_info
        if hss_info is not None:
            self.hss_info = hss_info
        if custom_info is not None:
            self.custom_info = custom_info
        if recovery_time is not None:
            self.recovery_time = recovery_time
        if nf_service_persistence is not None:
            self.nf_service_persistence = nf_service_persistence
        if nf_services is not None:
            self.nf_services = nf_services
        if default_notification_subscriptions is not None:
            self.default_notification_subscriptions = default_notification_subscriptions
        if lmf_info is not None:
            self.lmf_info = lmf_info
        if gmlc_info is not None:
            self.gmlc_info = gmlc_info
        if snpn_list is not None:
            self.snpn_list = snpn_list
        if nf_set_id_list is not None:
            self.nf_set_id_list = nf_set_id_list
        if serving_scope is not None:
            self.serving_scope = serving_scope
        if lc_h_support_ind is not None:
            self.lc_h_support_ind = lc_h_support_ind
        if olc_h_support_ind is not None:
            self.olc_h_support_ind = olc_h_support_ind

    @property
    def nf_instance_id(self):
        """Gets the nf_instance_id of this NFProfile.  # noqa: E501


        :return: The nf_instance_id of this NFProfile.  # noqa: E501
        :rtype: str
        """
        return self._nf_instance_id

    @nf_instance_id.setter
    def nf_instance_id(self, nf_instance_id):
        """Sets the nf_instance_id of this NFProfile.


        :param nf_instance_id: The nf_instance_id of this NFProfile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and nf_instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `nf_instance_id`, must not be `None`")  # noqa: E501

        self._nf_instance_id = nf_instance_id

    @property
    def nf_instance_name(self):
        """Gets the nf_instance_name of this NFProfile.  # noqa: E501


        :return: The nf_instance_name of this NFProfile.  # noqa: E501
        :rtype: str
        """
        return self._nf_instance_name

    @nf_instance_name.setter
    def nf_instance_name(self, nf_instance_name):
        """Sets the nf_instance_name of this NFProfile.


        :param nf_instance_name: The nf_instance_name of this NFProfile.  # noqa: E501
        :type: str
        """

        self._nf_instance_name = nf_instance_name

    @property
    def nf_type(self):
        """Gets the nf_type of this NFProfile.  # noqa: E501


        :return: The nf_type of this NFProfile.  # noqa: E501
        :rtype: NFType
        """
        return self._nf_type

    @nf_type.setter
    def nf_type(self, nf_type):
        """Sets the nf_type of this NFProfile.


        :param nf_type: The nf_type of this NFProfile.  # noqa: E501
        :type: NFType
        """
        if self.local_vars_configuration.client_side_validation and nf_type is None:  # noqa: E501
            raise ValueError("Invalid value for `nf_type`, must not be `None`")  # noqa: E501

        self._nf_type = nf_type

    @property
    def nf_status(self):
        """Gets the nf_status of this NFProfile.  # noqa: E501


        :return: The nf_status of this NFProfile.  # noqa: E501
        :rtype: NFStatus
        """
        return self._nf_status

    @nf_status.setter
    def nf_status(self, nf_status):
        """Sets the nf_status of this NFProfile.


        :param nf_status: The nf_status of this NFProfile.  # noqa: E501
        :type: NFStatus
        """
        if self.local_vars_configuration.client_side_validation and nf_status is None:  # noqa: E501
            raise ValueError("Invalid value for `nf_status`, must not be `None`")  # noqa: E501

        self._nf_status = nf_status

    @property
    def plmn_list(self):
        """Gets the plmn_list of this NFProfile.  # noqa: E501


        :return: The plmn_list of this NFProfile.  # noqa: E501
        :rtype: list[PlmnId]
        """
        return self._plmn_list

    @plmn_list.setter
    def plmn_list(self, plmn_list):
        """Sets the plmn_list of this NFProfile.


        :param plmn_list: The plmn_list of this NFProfile.  # noqa: E501
        :type: list[PlmnId]
        """

        self._plmn_list = plmn_list

    @property
    def s_nssais(self):
        """Gets the s_nssais of this NFProfile.  # noqa: E501


        :return: The s_nssais of this NFProfile.  # noqa: E501
        :rtype: list[Snssai]
        """
        return self._s_nssais

    @s_nssais.setter
    def s_nssais(self, s_nssais):
        """Sets the s_nssais of this NFProfile.


        :param s_nssais: The s_nssais of this NFProfile.  # noqa: E501
        :type: list[Snssai]
        """

        self._s_nssais = s_nssais

    @property
    def per_plmn_snssai_list(self):
        """Gets the per_plmn_snssai_list of this NFProfile.  # noqa: E501


        :return: The per_plmn_snssai_list of this NFProfile.  # noqa: E501
        :rtype: list[PlmnSnssai]
        """
        return self._per_plmn_snssai_list

    @per_plmn_snssai_list.setter
    def per_plmn_snssai_list(self, per_plmn_snssai_list):
        """Sets the per_plmn_snssai_list of this NFProfile.


        :param per_plmn_snssai_list: The per_plmn_snssai_list of this NFProfile.  # noqa: E501
        :type: list[PlmnSnssai]
        """

        self._per_plmn_snssai_list = per_plmn_snssai_list

    @property
    def nsi_list(self):
        """Gets the nsi_list of this NFProfile.  # noqa: E501


        :return: The nsi_list of this NFProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._nsi_list

    @nsi_list.setter
    def nsi_list(self, nsi_list):
        """Sets the nsi_list of this NFProfile.


        :param nsi_list: The nsi_list of this NFProfile.  # noqa: E501
        :type: list[str]
        """

        self._nsi_list = nsi_list

    @property
    def fqdn(self):
        """Gets the fqdn of this NFProfile.  # noqa: E501

        Fully Qualified Domain Name  # noqa: E501

        :return: The fqdn of this NFProfile.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this NFProfile.

        Fully Qualified Domain Name  # noqa: E501

        :param fqdn: The fqdn of this NFProfile.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def ipv4_addresses(self):
        """Gets the ipv4_addresses of this NFProfile.  # noqa: E501


        :return: The ipv4_addresses of this NFProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._ipv4_addresses

    @ipv4_addresses.setter
    def ipv4_addresses(self, ipv4_addresses):
        """Sets the ipv4_addresses of this NFProfile.


        :param ipv4_addresses: The ipv4_addresses of this NFProfile.  # noqa: E501
        :type: list[str]
        """

        self._ipv4_addresses = ipv4_addresses

    @property
    def ipv6_addresses(self):
        """Gets the ipv6_addresses of this NFProfile.  # noqa: E501


        :return: The ipv6_addresses of this NFProfile.  # noqa: E501
        :rtype: list[Ipv6Addr]
        """
        return self._ipv6_addresses

    @ipv6_addresses.setter
    def ipv6_addresses(self, ipv6_addresses):
        """Sets the ipv6_addresses of this NFProfile.


        :param ipv6_addresses: The ipv6_addresses of this NFProfile.  # noqa: E501
        :type: list[Ipv6Addr]
        """

        self._ipv6_addresses = ipv6_addresses

    @property
    def capacity(self):
        """Gets the capacity of this NFProfile.  # noqa: E501


        :return: The capacity of this NFProfile.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this NFProfile.


        :param capacity: The capacity of this NFProfile.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                capacity is not None and capacity > 65535):  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                capacity is not None and capacity < 0):  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._capacity = capacity

    @property
    def load(self):
        """Gets the load of this NFProfile.  # noqa: E501


        :return: The load of this NFProfile.  # noqa: E501
        :rtype: int
        """
        return self._load

    @load.setter
    def load(self, load):
        """Sets the load of this NFProfile.


        :param load: The load of this NFProfile.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                load is not None and load > 100):  # noqa: E501
            raise ValueError("Invalid value for `load`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                load is not None and load < 0):  # noqa: E501
            raise ValueError("Invalid value for `load`, must be a value greater than or equal to `0`")  # noqa: E501

        self._load = load

    @property
    def load_time_stamp(self):
        """Gets the load_time_stamp of this NFProfile.  # noqa: E501


        :return: The load_time_stamp of this NFProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._load_time_stamp

    @load_time_stamp.setter
    def load_time_stamp(self, load_time_stamp):
        """Sets the load_time_stamp of this NFProfile.


        :param load_time_stamp: The load_time_stamp of this NFProfile.  # noqa: E501
        :type: datetime
        """

        self._load_time_stamp = load_time_stamp

    @property
    def locality(self):
        """Gets the locality of this NFProfile.  # noqa: E501


        :return: The locality of this NFProfile.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this NFProfile.


        :param locality: The locality of this NFProfile.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def priority(self):
        """Gets the priority of this NFProfile.  # noqa: E501


        :return: The priority of this NFProfile.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this NFProfile.


        :param priority: The priority of this NFProfile.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority > 65535):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority < 0):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def udr_info(self):
        """Gets the udr_info of this NFProfile.  # noqa: E501


        :return: The udr_info of this NFProfile.  # noqa: E501
        :rtype: UdrInfo
        """
        return self._udr_info

    @udr_info.setter
    def udr_info(self, udr_info):
        """Sets the udr_info of this NFProfile.


        :param udr_info: The udr_info of this NFProfile.  # noqa: E501
        :type: UdrInfo
        """

        self._udr_info = udr_info

    @property
    def udr_info_ext(self):
        """Gets the udr_info_ext of this NFProfile.  # noqa: E501


        :return: The udr_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[UdrInfo]
        """
        return self._udr_info_ext

    @udr_info_ext.setter
    def udr_info_ext(self, udr_info_ext):
        """Sets the udr_info_ext of this NFProfile.


        :param udr_info_ext: The udr_info_ext of this NFProfile.  # noqa: E501
        :type: list[UdrInfo]
        """

        self._udr_info_ext = udr_info_ext

    @property
    def udm_info(self):
        """Gets the udm_info of this NFProfile.  # noqa: E501


        :return: The udm_info of this NFProfile.  # noqa: E501
        :rtype: UdmInfo
        """
        return self._udm_info

    @udm_info.setter
    def udm_info(self, udm_info):
        """Sets the udm_info of this NFProfile.


        :param udm_info: The udm_info of this NFProfile.  # noqa: E501
        :type: UdmInfo
        """

        self._udm_info = udm_info

    @property
    def udm_info_ext(self):
        """Gets the udm_info_ext of this NFProfile.  # noqa: E501


        :return: The udm_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[UdmInfo]
        """
        return self._udm_info_ext

    @udm_info_ext.setter
    def udm_info_ext(self, udm_info_ext):
        """Sets the udm_info_ext of this NFProfile.


        :param udm_info_ext: The udm_info_ext of this NFProfile.  # noqa: E501
        :type: list[UdmInfo]
        """

        self._udm_info_ext = udm_info_ext

    @property
    def ausf_info(self):
        """Gets the ausf_info of this NFProfile.  # noqa: E501


        :return: The ausf_info of this NFProfile.  # noqa: E501
        :rtype: AusfInfo
        """
        return self._ausf_info

    @ausf_info.setter
    def ausf_info(self, ausf_info):
        """Sets the ausf_info of this NFProfile.


        :param ausf_info: The ausf_info of this NFProfile.  # noqa: E501
        :type: AusfInfo
        """

        self._ausf_info = ausf_info

    @property
    def ausf_info_ext(self):
        """Gets the ausf_info_ext of this NFProfile.  # noqa: E501


        :return: The ausf_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[AusfInfo]
        """
        return self._ausf_info_ext

    @ausf_info_ext.setter
    def ausf_info_ext(self, ausf_info_ext):
        """Sets the ausf_info_ext of this NFProfile.


        :param ausf_info_ext: The ausf_info_ext of this NFProfile.  # noqa: E501
        :type: list[AusfInfo]
        """

        self._ausf_info_ext = ausf_info_ext

    @property
    def amf_info(self):
        """Gets the amf_info of this NFProfile.  # noqa: E501


        :return: The amf_info of this NFProfile.  # noqa: E501
        :rtype: AmfInfo
        """
        return self._amf_info

    @amf_info.setter
    def amf_info(self, amf_info):
        """Sets the amf_info of this NFProfile.


        :param amf_info: The amf_info of this NFProfile.  # noqa: E501
        :type: AmfInfo
        """

        self._amf_info = amf_info

    @property
    def amf_info_ext(self):
        """Gets the amf_info_ext of this NFProfile.  # noqa: E501


        :return: The amf_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[AmfInfo]
        """
        return self._amf_info_ext

    @amf_info_ext.setter
    def amf_info_ext(self, amf_info_ext):
        """Sets the amf_info_ext of this NFProfile.


        :param amf_info_ext: The amf_info_ext of this NFProfile.  # noqa: E501
        :type: list[AmfInfo]
        """

        self._amf_info_ext = amf_info_ext

    @property
    def smf_info(self):
        """Gets the smf_info of this NFProfile.  # noqa: E501


        :return: The smf_info of this NFProfile.  # noqa: E501
        :rtype: SmfInfo
        """
        return self._smf_info

    @smf_info.setter
    def smf_info(self, smf_info):
        """Sets the smf_info of this NFProfile.


        :param smf_info: The smf_info of this NFProfile.  # noqa: E501
        :type: SmfInfo
        """

        self._smf_info = smf_info

    @property
    def smf_info_ext(self):
        """Gets the smf_info_ext of this NFProfile.  # noqa: E501


        :return: The smf_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[SmfInfo]
        """
        return self._smf_info_ext

    @smf_info_ext.setter
    def smf_info_ext(self, smf_info_ext):
        """Sets the smf_info_ext of this NFProfile.


        :param smf_info_ext: The smf_info_ext of this NFProfile.  # noqa: E501
        :type: list[SmfInfo]
        """

        self._smf_info_ext = smf_info_ext

    @property
    def upf_info(self):
        """Gets the upf_info of this NFProfile.  # noqa: E501


        :return: The upf_info of this NFProfile.  # noqa: E501
        :rtype: UpfInfo
        """
        return self._upf_info

    @upf_info.setter
    def upf_info(self, upf_info):
        """Sets the upf_info of this NFProfile.


        :param upf_info: The upf_info of this NFProfile.  # noqa: E501
        :type: UpfInfo
        """

        self._upf_info = upf_info

    @property
    def upf_info_ext(self):
        """Gets the upf_info_ext of this NFProfile.  # noqa: E501


        :return: The upf_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[UpfInfo]
        """
        return self._upf_info_ext

    @upf_info_ext.setter
    def upf_info_ext(self, upf_info_ext):
        """Sets the upf_info_ext of this NFProfile.


        :param upf_info_ext: The upf_info_ext of this NFProfile.  # noqa: E501
        :type: list[UpfInfo]
        """

        self._upf_info_ext = upf_info_ext

    @property
    def pcf_info(self):
        """Gets the pcf_info of this NFProfile.  # noqa: E501


        :return: The pcf_info of this NFProfile.  # noqa: E501
        :rtype: PcfInfo
        """
        return self._pcf_info

    @pcf_info.setter
    def pcf_info(self, pcf_info):
        """Sets the pcf_info of this NFProfile.


        :param pcf_info: The pcf_info of this NFProfile.  # noqa: E501
        :type: PcfInfo
        """

        self._pcf_info = pcf_info

    @property
    def pcf_info_ext(self):
        """Gets the pcf_info_ext of this NFProfile.  # noqa: E501


        :return: The pcf_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[PcfInfo]
        """
        return self._pcf_info_ext

    @pcf_info_ext.setter
    def pcf_info_ext(self, pcf_info_ext):
        """Sets the pcf_info_ext of this NFProfile.


        :param pcf_info_ext: The pcf_info_ext of this NFProfile.  # noqa: E501
        :type: list[PcfInfo]
        """

        self._pcf_info_ext = pcf_info_ext

    @property
    def bsf_info(self):
        """Gets the bsf_info of this NFProfile.  # noqa: E501


        :return: The bsf_info of this NFProfile.  # noqa: E501
        :rtype: BsfInfo
        """
        return self._bsf_info

    @bsf_info.setter
    def bsf_info(self, bsf_info):
        """Sets the bsf_info of this NFProfile.


        :param bsf_info: The bsf_info of this NFProfile.  # noqa: E501
        :type: BsfInfo
        """

        self._bsf_info = bsf_info

    @property
    def bsf_info_ext(self):
        """Gets the bsf_info_ext of this NFProfile.  # noqa: E501


        :return: The bsf_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[BsfInfo]
        """
        return self._bsf_info_ext

    @bsf_info_ext.setter
    def bsf_info_ext(self, bsf_info_ext):
        """Sets the bsf_info_ext of this NFProfile.


        :param bsf_info_ext: The bsf_info_ext of this NFProfile.  # noqa: E501
        :type: list[BsfInfo]
        """

        self._bsf_info_ext = bsf_info_ext

    @property
    def chf_info(self):
        """Gets the chf_info of this NFProfile.  # noqa: E501


        :return: The chf_info of this NFProfile.  # noqa: E501
        :rtype: ChfInfo
        """
        return self._chf_info

    @chf_info.setter
    def chf_info(self, chf_info):
        """Sets the chf_info of this NFProfile.


        :param chf_info: The chf_info of this NFProfile.  # noqa: E501
        :type: ChfInfo
        """

        self._chf_info = chf_info

    @property
    def chf_info_ext(self):
        """Gets the chf_info_ext of this NFProfile.  # noqa: E501


        :return: The chf_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[ChfInfo]
        """
        return self._chf_info_ext

    @chf_info_ext.setter
    def chf_info_ext(self, chf_info_ext):
        """Sets the chf_info_ext of this NFProfile.


        :param chf_info_ext: The chf_info_ext of this NFProfile.  # noqa: E501
        :type: list[ChfInfo]
        """

        self._chf_info_ext = chf_info_ext

    @property
    def udsf_info(self):
        """Gets the udsf_info of this NFProfile.  # noqa: E501


        :return: The udsf_info of this NFProfile.  # noqa: E501
        :rtype: UdsfInfo
        """
        return self._udsf_info

    @udsf_info.setter
    def udsf_info(self, udsf_info):
        """Sets the udsf_info of this NFProfile.


        :param udsf_info: The udsf_info of this NFProfile.  # noqa: E501
        :type: UdsfInfo
        """

        self._udsf_info = udsf_info

    @property
    def udsf_info_ext(self):
        """Gets the udsf_info_ext of this NFProfile.  # noqa: E501


        :return: The udsf_info_ext of this NFProfile.  # noqa: E501
        :rtype: list[UdsfInfo]
        """
        return self._udsf_info_ext

    @udsf_info_ext.setter
    def udsf_info_ext(self, udsf_info_ext):
        """Sets the udsf_info_ext of this NFProfile.


        :param udsf_info_ext: The udsf_info_ext of this NFProfile.  # noqa: E501
        :type: list[UdsfInfo]
        """

        self._udsf_info_ext = udsf_info_ext

    @property
    def nwdaf_info(self):
        """Gets the nwdaf_info of this NFProfile.  # noqa: E501


        :return: The nwdaf_info of this NFProfile.  # noqa: E501
        :rtype: NwdafInfo
        """
        return self._nwdaf_info

    @nwdaf_info.setter
    def nwdaf_info(self, nwdaf_info):
        """Sets the nwdaf_info of this NFProfile.


        :param nwdaf_info: The nwdaf_info of this NFProfile.  # noqa: E501
        :type: NwdafInfo
        """

        self._nwdaf_info = nwdaf_info

    @property
    def nef_info(self):
        """Gets the nef_info of this NFProfile.  # noqa: E501


        :return: The nef_info of this NFProfile.  # noqa: E501
        :rtype: NefInfo
        """
        return self._nef_info

    @nef_info.setter
    def nef_info(self, nef_info):
        """Sets the nef_info of this NFProfile.


        :param nef_info: The nef_info of this NFProfile.  # noqa: E501
        :type: NefInfo
        """

        self._nef_info = nef_info

    @property
    def pcscf_info(self):
        """Gets the pcscf_info of this NFProfile.  # noqa: E501


        :return: The pcscf_info of this NFProfile.  # noqa: E501
        :rtype: list[PcscfInfo]
        """
        return self._pcscf_info

    @pcscf_info.setter
    def pcscf_info(self, pcscf_info):
        """Sets the pcscf_info of this NFProfile.


        :param pcscf_info: The pcscf_info of this NFProfile.  # noqa: E501
        :type: list[PcscfInfo]
        """

        self._pcscf_info = pcscf_info

    @property
    def hss_info(self):
        """Gets the hss_info of this NFProfile.  # noqa: E501


        :return: The hss_info of this NFProfile.  # noqa: E501
        :rtype: list[HssInfo]
        """
        return self._hss_info

    @hss_info.setter
    def hss_info(self, hss_info):
        """Sets the hss_info of this NFProfile.


        :param hss_info: The hss_info of this NFProfile.  # noqa: E501
        :type: list[HssInfo]
        """

        self._hss_info = hss_info

    @property
    def custom_info(self):
        """Gets the custom_info of this NFProfile.  # noqa: E501


        :return: The custom_info of this NFProfile.  # noqa: E501
        :rtype: object
        """
        return self._custom_info

    @custom_info.setter
    def custom_info(self, custom_info):
        """Sets the custom_info of this NFProfile.


        :param custom_info: The custom_info of this NFProfile.  # noqa: E501
        :type: object
        """

        self._custom_info = custom_info

    @property
    def recovery_time(self):
        """Gets the recovery_time of this NFProfile.  # noqa: E501


        :return: The recovery_time of this NFProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._recovery_time

    @recovery_time.setter
    def recovery_time(self, recovery_time):
        """Sets the recovery_time of this NFProfile.


        :param recovery_time: The recovery_time of this NFProfile.  # noqa: E501
        :type: datetime
        """

        self._recovery_time = recovery_time

    @property
    def nf_service_persistence(self):
        """Gets the nf_service_persistence of this NFProfile.  # noqa: E501


        :return: The nf_service_persistence of this NFProfile.  # noqa: E501
        :rtype: bool
        """
        return self._nf_service_persistence

    @nf_service_persistence.setter
    def nf_service_persistence(self, nf_service_persistence):
        """Sets the nf_service_persistence of this NFProfile.


        :param nf_service_persistence: The nf_service_persistence of this NFProfile.  # noqa: E501
        :type: bool
        """

        self._nf_service_persistence = nf_service_persistence

    @property
    def nf_services(self):
        """Gets the nf_services of this NFProfile.  # noqa: E501


        :return: The nf_services of this NFProfile.  # noqa: E501
        :rtype: list[NFService]
        """
        return self._nf_services

    @nf_services.setter
    def nf_services(self, nf_services):
        """Sets the nf_services of this NFProfile.


        :param nf_services: The nf_services of this NFProfile.  # noqa: E501
        :type: list[NFService]
        """

        self._nf_services = nf_services

    @property
    def default_notification_subscriptions(self):
        """Gets the default_notification_subscriptions of this NFProfile.  # noqa: E501


        :return: The default_notification_subscriptions of this NFProfile.  # noqa: E501
        :rtype: list[DefaultNotificationSubscription]
        """
        return self._default_notification_subscriptions

    @default_notification_subscriptions.setter
    def default_notification_subscriptions(self, default_notification_subscriptions):
        """Sets the default_notification_subscriptions of this NFProfile.


        :param default_notification_subscriptions: The default_notification_subscriptions of this NFProfile.  # noqa: E501
        :type: list[DefaultNotificationSubscription]
        """

        self._default_notification_subscriptions = default_notification_subscriptions

    @property
    def lmf_info(self):
        """Gets the lmf_info of this NFProfile.  # noqa: E501


        :return: The lmf_info of this NFProfile.  # noqa: E501
        :rtype: LmfInfo
        """
        return self._lmf_info

    @lmf_info.setter
    def lmf_info(self, lmf_info):
        """Sets the lmf_info of this NFProfile.


        :param lmf_info: The lmf_info of this NFProfile.  # noqa: E501
        :type: LmfInfo
        """

        self._lmf_info = lmf_info

    @property
    def gmlc_info(self):
        """Gets the gmlc_info of this NFProfile.  # noqa: E501


        :return: The gmlc_info of this NFProfile.  # noqa: E501
        :rtype: GmlcInfo
        """
        return self._gmlc_info

    @gmlc_info.setter
    def gmlc_info(self, gmlc_info):
        """Sets the gmlc_info of this NFProfile.


        :param gmlc_info: The gmlc_info of this NFProfile.  # noqa: E501
        :type: GmlcInfo
        """

        self._gmlc_info = gmlc_info

    @property
    def snpn_list(self):
        """Gets the snpn_list of this NFProfile.  # noqa: E501


        :return: The snpn_list of this NFProfile.  # noqa: E501
        :rtype: list[PlmnIdNid]
        """
        return self._snpn_list

    @snpn_list.setter
    def snpn_list(self, snpn_list):
        """Sets the snpn_list of this NFProfile.


        :param snpn_list: The snpn_list of this NFProfile.  # noqa: E501
        :type: list[PlmnIdNid]
        """

        self._snpn_list = snpn_list

    @property
    def nf_set_id_list(self):
        """Gets the nf_set_id_list of this NFProfile.  # noqa: E501


        :return: The nf_set_id_list of this NFProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._nf_set_id_list

    @nf_set_id_list.setter
    def nf_set_id_list(self, nf_set_id_list):
        """Sets the nf_set_id_list of this NFProfile.


        :param nf_set_id_list: The nf_set_id_list of this NFProfile.  # noqa: E501
        :type: list[str]
        """

        self._nf_set_id_list = nf_set_id_list

    @property
    def serving_scope(self):
        """Gets the serving_scope of this NFProfile.  # noqa: E501


        :return: The serving_scope of this NFProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._serving_scope

    @serving_scope.setter
    def serving_scope(self, serving_scope):
        """Sets the serving_scope of this NFProfile.


        :param serving_scope: The serving_scope of this NFProfile.  # noqa: E501
        :type: list[str]
        """

        self._serving_scope = serving_scope

    @property
    def lc_h_support_ind(self):
        """Gets the lc_h_support_ind of this NFProfile.  # noqa: E501


        :return: The lc_h_support_ind of this NFProfile.  # noqa: E501
        :rtype: bool
        """
        return self._lc_h_support_ind

    @lc_h_support_ind.setter
    def lc_h_support_ind(self, lc_h_support_ind):
        """Sets the lc_h_support_ind of this NFProfile.


        :param lc_h_support_ind: The lc_h_support_ind of this NFProfile.  # noqa: E501
        :type: bool
        """

        self._lc_h_support_ind = lc_h_support_ind

    @property
    def olc_h_support_ind(self):
        """Gets the olc_h_support_ind of this NFProfile.  # noqa: E501


        :return: The olc_h_support_ind of this NFProfile.  # noqa: E501
        :rtype: bool
        """
        return self._olc_h_support_ind

    @olc_h_support_ind.setter
    def olc_h_support_ind(self, olc_h_support_ind):
        """Sets the olc_h_support_ind of this NFProfile.


        :param olc_h_support_ind: The olc_h_support_ind of this NFProfile.  # noqa: E501
        :type: bool
        """

        self._olc_h_support_ind = olc_h_support_ind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NFProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NFProfile):
            return True

        return self.to_dict() != other.to_dict()
