# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class NFService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'service_instance_id': 'str',
        'service_name': 'ServiceName',
        'versions': 'list[NFServiceVersion]',
        'scheme': 'UriScheme',
        'nf_service_status': 'NFServiceStatus',
        'fqdn': 'str',
        'ip_end_points': 'list[IpEndPoint]',
        'api_prefix': 'str',
        'default_notification_subscriptions': 'list[DefaultNotificationSubscription]',
        'capacity': 'int',
        'load': 'int',
        'load_time_stamp': 'datetime',
        'priority': 'int',
        'recovery_time': 'datetime',
        'chf_service_info': 'ChfServiceInfo',
        'supported_features': 'str',
        'nf_service_set_id_list': 'list[str]',
        's_nssais': 'list[Snssai]',
        'per_plmn_snssai_list': 'list[PlmnSnssai]',
        'vendor_id': 'str',
        'supported_vendor_specific_features': 'dict(str, list[VendorSpecificFeature])',
        'oauth2_required': 'bool'
    }

    attribute_map = {
        'service_instance_id': 'serviceInstanceId',
        'service_name': 'serviceName',
        'versions': 'versions',
        'scheme': 'scheme',
        'nf_service_status': 'nfServiceStatus',
        'fqdn': 'fqdn',
        'ip_end_points': 'ipEndPoints',
        'api_prefix': 'apiPrefix',
        'default_notification_subscriptions': 'defaultNotificationSubscriptions',
        'capacity': 'capacity',
        'load': 'load',
        'load_time_stamp': 'loadTimeStamp',
        'priority': 'priority',
        'recovery_time': 'recoveryTime',
        'chf_service_info': 'chfServiceInfo',
        'supported_features': 'supportedFeatures',
        'nf_service_set_id_list': 'nfServiceSetIdList',
        's_nssais': 'sNssais',
        'per_plmn_snssai_list': 'perPlmnSnssaiList',
        'vendor_id': 'vendorId',
        'supported_vendor_specific_features': 'supportedVendorSpecificFeatures',
        'oauth2_required': 'oauth2Required'
    }

    def __init__(self, service_instance_id=None, service_name=None, versions=None, scheme=None, nf_service_status=None, fqdn=None, ip_end_points=None, api_prefix=None, default_notification_subscriptions=None, capacity=None, load=None, load_time_stamp=None, priority=None, recovery_time=None, chf_service_info=None, supported_features=None, nf_service_set_id_list=None, s_nssais=None, per_plmn_snssai_list=None, vendor_id=None, supported_vendor_specific_features=None, oauth2_required=None, local_vars_configuration=None):  # noqa: E501
        """NFService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._service_instance_id = None
        self._service_name = None
        self._versions = None
        self._scheme = None
        self._nf_service_status = None
        self._fqdn = None
        self._ip_end_points = None
        self._api_prefix = None
        self._default_notification_subscriptions = None
        self._capacity = None
        self._load = None
        self._load_time_stamp = None
        self._priority = None
        self._recovery_time = None
        self._chf_service_info = None
        self._supported_features = None
        self._nf_service_set_id_list = None
        self._s_nssais = None
        self._per_plmn_snssai_list = None
        self._vendor_id = None
        self._supported_vendor_specific_features = None
        self._oauth2_required = None
        self.discriminator = None

        self.service_instance_id = service_instance_id
        self.service_name = service_name
        self.versions = versions
        self.scheme = scheme
        self.nf_service_status = nf_service_status
        if fqdn is not None:
            self.fqdn = fqdn
        if ip_end_points is not None:
            self.ip_end_points = ip_end_points
        if api_prefix is not None:
            self.api_prefix = api_prefix
        if default_notification_subscriptions is not None:
            self.default_notification_subscriptions = default_notification_subscriptions
        if capacity is not None:
            self.capacity = capacity
        if load is not None:
            self.load = load
        if load_time_stamp is not None:
            self.load_time_stamp = load_time_stamp
        if priority is not None:
            self.priority = priority
        if recovery_time is not None:
            self.recovery_time = recovery_time
        if chf_service_info is not None:
            self.chf_service_info = chf_service_info
        if supported_features is not None:
            self.supported_features = supported_features
        if nf_service_set_id_list is not None:
            self.nf_service_set_id_list = nf_service_set_id_list
        if s_nssais is not None:
            self.s_nssais = s_nssais
        if per_plmn_snssai_list is not None:
            self.per_plmn_snssai_list = per_plmn_snssai_list
        if vendor_id is not None:
            self.vendor_id = vendor_id
        if supported_vendor_specific_features is not None:
            self.supported_vendor_specific_features = supported_vendor_specific_features
        if oauth2_required is not None:
            self.oauth2_required = oauth2_required

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this NFService.  # noqa: E501


        :return: The service_instance_id of this NFService.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this NFService.


        :param service_instance_id: The service_instance_id of this NFService.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and service_instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `service_instance_id`, must not be `None`")  # noqa: E501

        self._service_instance_id = service_instance_id

    @property
    def service_name(self):
        """Gets the service_name of this NFService.  # noqa: E501


        :return: The service_name of this NFService.  # noqa: E501
        :rtype: ServiceName
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this NFService.


        :param service_name: The service_name of this NFService.  # noqa: E501
        :type: ServiceName
        """
        if self.local_vars_configuration.client_side_validation and service_name is None:  # noqa: E501
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def versions(self):
        """Gets the versions of this NFService.  # noqa: E501


        :return: The versions of this NFService.  # noqa: E501
        :rtype: list[NFServiceVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this NFService.


        :param versions: The versions of this NFService.  # noqa: E501
        :type: list[NFServiceVersion]
        """
        if self.local_vars_configuration.client_side_validation and versions is None:  # noqa: E501
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions

    @property
    def scheme(self):
        """Gets the scheme of this NFService.  # noqa: E501


        :return: The scheme of this NFService.  # noqa: E501
        :rtype: UriScheme
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this NFService.


        :param scheme: The scheme of this NFService.  # noqa: E501
        :type: UriScheme
        """
        if self.local_vars_configuration.client_side_validation and scheme is None:  # noqa: E501
            raise ValueError("Invalid value for `scheme`, must not be `None`")  # noqa: E501

        self._scheme = scheme

    @property
    def nf_service_status(self):
        """Gets the nf_service_status of this NFService.  # noqa: E501


        :return: The nf_service_status of this NFService.  # noqa: E501
        :rtype: NFServiceStatus
        """
        return self._nf_service_status

    @nf_service_status.setter
    def nf_service_status(self, nf_service_status):
        """Sets the nf_service_status of this NFService.


        :param nf_service_status: The nf_service_status of this NFService.  # noqa: E501
        :type: NFServiceStatus
        """
        if self.local_vars_configuration.client_side_validation and nf_service_status is None:  # noqa: E501
            raise ValueError("Invalid value for `nf_service_status`, must not be `None`")  # noqa: E501

        self._nf_service_status = nf_service_status

    @property
    def fqdn(self):
        """Gets the fqdn of this NFService.  # noqa: E501

        Fully Qualified Domain Name  # noqa: E501

        :return: The fqdn of this NFService.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this NFService.

        Fully Qualified Domain Name  # noqa: E501

        :param fqdn: The fqdn of this NFService.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def ip_end_points(self):
        """Gets the ip_end_points of this NFService.  # noqa: E501


        :return: The ip_end_points of this NFService.  # noqa: E501
        :rtype: list[IpEndPoint]
        """
        return self._ip_end_points

    @ip_end_points.setter
    def ip_end_points(self, ip_end_points):
        """Sets the ip_end_points of this NFService.


        :param ip_end_points: The ip_end_points of this NFService.  # noqa: E501
        :type: list[IpEndPoint]
        """

        self._ip_end_points = ip_end_points

    @property
    def api_prefix(self):
        """Gets the api_prefix of this NFService.  # noqa: E501


        :return: The api_prefix of this NFService.  # noqa: E501
        :rtype: str
        """
        return self._api_prefix

    @api_prefix.setter
    def api_prefix(self, api_prefix):
        """Sets the api_prefix of this NFService.


        :param api_prefix: The api_prefix of this NFService.  # noqa: E501
        :type: str
        """

        self._api_prefix = api_prefix

    @property
    def default_notification_subscriptions(self):
        """Gets the default_notification_subscriptions of this NFService.  # noqa: E501


        :return: The default_notification_subscriptions of this NFService.  # noqa: E501
        :rtype: list[DefaultNotificationSubscription]
        """
        return self._default_notification_subscriptions

    @default_notification_subscriptions.setter
    def default_notification_subscriptions(self, default_notification_subscriptions):
        """Sets the default_notification_subscriptions of this NFService.


        :param default_notification_subscriptions: The default_notification_subscriptions of this NFService.  # noqa: E501
        :type: list[DefaultNotificationSubscription]
        """

        self._default_notification_subscriptions = default_notification_subscriptions

    @property
    def capacity(self):
        """Gets the capacity of this NFService.  # noqa: E501


        :return: The capacity of this NFService.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this NFService.


        :param capacity: The capacity of this NFService.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                capacity is not None and capacity > 65535):  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                capacity is not None and capacity < 0):  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._capacity = capacity

    @property
    def load(self):
        """Gets the load of this NFService.  # noqa: E501


        :return: The load of this NFService.  # noqa: E501
        :rtype: int
        """
        return self._load

    @load.setter
    def load(self, load):
        """Sets the load of this NFService.


        :param load: The load of this NFService.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                load is not None and load > 100):  # noqa: E501
            raise ValueError("Invalid value for `load`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                load is not None and load < 0):  # noqa: E501
            raise ValueError("Invalid value for `load`, must be a value greater than or equal to `0`")  # noqa: E501

        self._load = load

    @property
    def load_time_stamp(self):
        """Gets the load_time_stamp of this NFService.  # noqa: E501


        :return: The load_time_stamp of this NFService.  # noqa: E501
        :rtype: datetime
        """
        return self._load_time_stamp

    @load_time_stamp.setter
    def load_time_stamp(self, load_time_stamp):
        """Sets the load_time_stamp of this NFService.


        :param load_time_stamp: The load_time_stamp of this NFService.  # noqa: E501
        :type: datetime
        """

        self._load_time_stamp = load_time_stamp

    @property
    def priority(self):
        """Gets the priority of this NFService.  # noqa: E501


        :return: The priority of this NFService.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this NFService.


        :param priority: The priority of this NFService.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority > 65535):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority < 0):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def recovery_time(self):
        """Gets the recovery_time of this NFService.  # noqa: E501


        :return: The recovery_time of this NFService.  # noqa: E501
        :rtype: datetime
        """
        return self._recovery_time

    @recovery_time.setter
    def recovery_time(self, recovery_time):
        """Sets the recovery_time of this NFService.


        :param recovery_time: The recovery_time of this NFService.  # noqa: E501
        :type: datetime
        """

        self._recovery_time = recovery_time

    @property
    def chf_service_info(self):
        """Gets the chf_service_info of this NFService.  # noqa: E501


        :return: The chf_service_info of this NFService.  # noqa: E501
        :rtype: ChfServiceInfo
        """
        return self._chf_service_info

    @chf_service_info.setter
    def chf_service_info(self, chf_service_info):
        """Sets the chf_service_info of this NFService.


        :param chf_service_info: The chf_service_info of this NFService.  # noqa: E501
        :type: ChfServiceInfo
        """

        self._chf_service_info = chf_service_info

    @property
    def supported_features(self):
        """Gets the supported_features of this NFService.  # noqa: E501


        :return: The supported_features of this NFService.  # noqa: E501
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this NFService.


        :param supported_features: The supported_features of this NFService.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features)):  # noqa: E501
            raise ValueError(r"Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features

    @property
    def nf_service_set_id_list(self):
        """Gets the nf_service_set_id_list of this NFService.  # noqa: E501


        :return: The nf_service_set_id_list of this NFService.  # noqa: E501
        :rtype: list[str]
        """
        return self._nf_service_set_id_list

    @nf_service_set_id_list.setter
    def nf_service_set_id_list(self, nf_service_set_id_list):
        """Sets the nf_service_set_id_list of this NFService.


        :param nf_service_set_id_list: The nf_service_set_id_list of this NFService.  # noqa: E501
        :type: list[str]
        """

        self._nf_service_set_id_list = nf_service_set_id_list

    @property
    def s_nssais(self):
        """Gets the s_nssais of this NFService.  # noqa: E501


        :return: The s_nssais of this NFService.  # noqa: E501
        :rtype: list[Snssai]
        """
        return self._s_nssais

    @s_nssais.setter
    def s_nssais(self, s_nssais):
        """Sets the s_nssais of this NFService.


        :param s_nssais: The s_nssais of this NFService.  # noqa: E501
        :type: list[Snssai]
        """

        self._s_nssais = s_nssais

    @property
    def per_plmn_snssai_list(self):
        """Gets the per_plmn_snssai_list of this NFService.  # noqa: E501


        :return: The per_plmn_snssai_list of this NFService.  # noqa: E501
        :rtype: list[PlmnSnssai]
        """
        return self._per_plmn_snssai_list

    @per_plmn_snssai_list.setter
    def per_plmn_snssai_list(self, per_plmn_snssai_list):
        """Sets the per_plmn_snssai_list of this NFService.


        :param per_plmn_snssai_list: The per_plmn_snssai_list of this NFService.  # noqa: E501
        :type: list[PlmnSnssai]
        """

        self._per_plmn_snssai_list = per_plmn_snssai_list

    @property
    def vendor_id(self):
        """Gets the vendor_id of this NFService.  # noqa: E501

        Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA)  # noqa: E501

        :return: The vendor_id of this NFService.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this NFService.

        Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA)  # noqa: E501

        :param vendor_id: The vendor_id of this NFService.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                vendor_id is not None and not re.search(r'^[0-9]{6}$', vendor_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `vendor_id`, must be a follow pattern or equal to `/^[0-9]{6}$/`")  # noqa: E501

        self._vendor_id = vendor_id

    @property
    def supported_vendor_specific_features(self):
        """Gets the supported_vendor_specific_features of this NFService.  # noqa: E501


        :return: The supported_vendor_specific_features of this NFService.  # noqa: E501
        :rtype: dict(str, list[VendorSpecificFeature])
        """
        return self._supported_vendor_specific_features

    @supported_vendor_specific_features.setter
    def supported_vendor_specific_features(self, supported_vendor_specific_features):
        """Sets the supported_vendor_specific_features of this NFService.


        :param supported_vendor_specific_features: The supported_vendor_specific_features of this NFService.  # noqa: E501
        :type: dict(str, list[VendorSpecificFeature])
        """

        self._supported_vendor_specific_features = supported_vendor_specific_features

    @property
    def oauth2_required(self):
        """Gets the oauth2_required of this NFService.  # noqa: E501


        :return: The oauth2_required of this NFService.  # noqa: E501
        :rtype: bool
        """
        return self._oauth2_required

    @oauth2_required.setter
    def oauth2_required(self, oauth2_required):
        """Sets the oauth2_required of this NFService.


        :param oauth2_required: The oauth2_required of this NFService.  # noqa: E501
        :type: bool
        """

        self._oauth2_required = oauth2_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NFService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NFService):
            return True

        return self.to_dict() != other.to_dict()
