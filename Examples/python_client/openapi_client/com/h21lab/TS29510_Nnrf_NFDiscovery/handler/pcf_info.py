# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PcfInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group_id': 'str',
        'dnn_list': 'list[str]',
        'supi_ranges': 'list[SupiRange]',
        'gpsi_ranges': 'list[IdentityRange]',
        'rx_diam_host': 'str',
        'rx_diam_realm': 'str',
        'v2x_support_ind': 'bool'
    }

    attribute_map = {
        'group_id': 'groupId',
        'dnn_list': 'dnnList',
        'supi_ranges': 'supiRanges',
        'gpsi_ranges': 'gpsiRanges',
        'rx_diam_host': 'rxDiamHost',
        'rx_diam_realm': 'rxDiamRealm',
        'v2x_support_ind': 'v2xSupportInd'
    }

    def __init__(self, group_id=None, dnn_list=None, supi_ranges=None, gpsi_ranges=None, rx_diam_host=None, rx_diam_realm=None, v2x_support_ind=False, local_vars_configuration=None):  # noqa: E501
        """PcfInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._group_id = None
        self._dnn_list = None
        self._supi_ranges = None
        self._gpsi_ranges = None
        self._rx_diam_host = None
        self._rx_diam_realm = None
        self._v2x_support_ind = None
        self.discriminator = None

        if group_id is not None:
            self.group_id = group_id
        if dnn_list is not None:
            self.dnn_list = dnn_list
        if supi_ranges is not None:
            self.supi_ranges = supi_ranges
        if gpsi_ranges is not None:
            self.gpsi_ranges = gpsi_ranges
        if rx_diam_host is not None:
            self.rx_diam_host = rx_diam_host
        if rx_diam_realm is not None:
            self.rx_diam_realm = rx_diam_realm
        if v2x_support_ind is not None:
            self.v2x_support_ind = v2x_support_ind

    @property
    def group_id(self):
        """Gets the group_id of this PcfInfo.  # noqa: E501


        :return: The group_id of this PcfInfo.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PcfInfo.


        :param group_id: The group_id of this PcfInfo.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def dnn_list(self):
        """Gets the dnn_list of this PcfInfo.  # noqa: E501


        :return: The dnn_list of this PcfInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._dnn_list

    @dnn_list.setter
    def dnn_list(self, dnn_list):
        """Sets the dnn_list of this PcfInfo.


        :param dnn_list: The dnn_list of this PcfInfo.  # noqa: E501
        :type: list[str]
        """

        self._dnn_list = dnn_list

    @property
    def supi_ranges(self):
        """Gets the supi_ranges of this PcfInfo.  # noqa: E501


        :return: The supi_ranges of this PcfInfo.  # noqa: E501
        :rtype: list[SupiRange]
        """
        return self._supi_ranges

    @supi_ranges.setter
    def supi_ranges(self, supi_ranges):
        """Sets the supi_ranges of this PcfInfo.


        :param supi_ranges: The supi_ranges of this PcfInfo.  # noqa: E501
        :type: list[SupiRange]
        """

        self._supi_ranges = supi_ranges

    @property
    def gpsi_ranges(self):
        """Gets the gpsi_ranges of this PcfInfo.  # noqa: E501


        :return: The gpsi_ranges of this PcfInfo.  # noqa: E501
        :rtype: list[IdentityRange]
        """
        return self._gpsi_ranges

    @gpsi_ranges.setter
    def gpsi_ranges(self, gpsi_ranges):
        """Sets the gpsi_ranges of this PcfInfo.


        :param gpsi_ranges: The gpsi_ranges of this PcfInfo.  # noqa: E501
        :type: list[IdentityRange]
        """

        self._gpsi_ranges = gpsi_ranges

    @property
    def rx_diam_host(self):
        """Gets the rx_diam_host of this PcfInfo.  # noqa: E501


        :return: The rx_diam_host of this PcfInfo.  # noqa: E501
        :rtype: str
        """
        return self._rx_diam_host

    @rx_diam_host.setter
    def rx_diam_host(self, rx_diam_host):
        """Sets the rx_diam_host of this PcfInfo.


        :param rx_diam_host: The rx_diam_host of this PcfInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                rx_diam_host is not None and not re.search(r'^([A-Za-z0-9]+([-A-Za-z0-9]+)\.)+[a-z]{2,}$', rx_diam_host)):  # noqa: E501
            raise ValueError(r"Invalid value for `rx_diam_host`, must be a follow pattern or equal to `/^([A-Za-z0-9]+([-A-Za-z0-9]+)\.)+[a-z]{2,}$/`")  # noqa: E501

        self._rx_diam_host = rx_diam_host

    @property
    def rx_diam_realm(self):
        """Gets the rx_diam_realm of this PcfInfo.  # noqa: E501


        :return: The rx_diam_realm of this PcfInfo.  # noqa: E501
        :rtype: str
        """
        return self._rx_diam_realm

    @rx_diam_realm.setter
    def rx_diam_realm(self, rx_diam_realm):
        """Sets the rx_diam_realm of this PcfInfo.


        :param rx_diam_realm: The rx_diam_realm of this PcfInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                rx_diam_realm is not None and not re.search(r'^([A-Za-z0-9]+([-A-Za-z0-9]+)\.)+[a-z]{2,}$', rx_diam_realm)):  # noqa: E501
            raise ValueError(r"Invalid value for `rx_diam_realm`, must be a follow pattern or equal to `/^([A-Za-z0-9]+([-A-Za-z0-9]+)\.)+[a-z]{2,}$/`")  # noqa: E501

        self._rx_diam_realm = rx_diam_realm

    @property
    def v2x_support_ind(self):
        """Gets the v2x_support_ind of this PcfInfo.  # noqa: E501


        :return: The v2x_support_ind of this PcfInfo.  # noqa: E501
        :rtype: bool
        """
        return self._v2x_support_ind

    @v2x_support_ind.setter
    def v2x_support_ind(self, v2x_support_ind):
        """Sets the v2x_support_ind of this PcfInfo.


        :param v2x_support_ind: The v2x_support_ind of this PcfInfo.  # noqa: E501
        :type: bool
        """

        self._v2x_support_ind = v2x_support_ind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PcfInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PcfInfo):
            return True

        return self.to_dict() != other.to_dict()
