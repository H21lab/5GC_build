# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SearchResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'validity_period': 'int',
        'nf_instances': 'list[NFProfile]',
        'search_id': 'str',
        'num_nf_inst_complete': 'int',
        'preferred_search': 'PreferredSearch',
        'nrf_supported_features': 'str'
    }

    attribute_map = {
        'validity_period': 'validityPeriod',
        'nf_instances': 'nfInstances',
        'search_id': 'searchId',
        'num_nf_inst_complete': 'numNfInstComplete',
        'preferred_search': 'preferredSearch',
        'nrf_supported_features': 'nrfSupportedFeatures'
    }

    def __init__(self, validity_period=None, nf_instances=None, search_id=None, num_nf_inst_complete=None, preferred_search=None, nrf_supported_features=None, local_vars_configuration=None):  # noqa: E501
        """SearchResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._validity_period = None
        self._nf_instances = None
        self._search_id = None
        self._num_nf_inst_complete = None
        self._preferred_search = None
        self._nrf_supported_features = None
        self.discriminator = None

        if validity_period is not None:
            self.validity_period = validity_period
        self.nf_instances = nf_instances
        if search_id is not None:
            self.search_id = search_id
        if num_nf_inst_complete is not None:
            self.num_nf_inst_complete = num_nf_inst_complete
        if preferred_search is not None:
            self.preferred_search = preferred_search
        if nrf_supported_features is not None:
            self.nrf_supported_features = nrf_supported_features

    @property
    def validity_period(self):
        """Gets the validity_period of this SearchResult.  # noqa: E501


        :return: The validity_period of this SearchResult.  # noqa: E501
        :rtype: int
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this SearchResult.


        :param validity_period: The validity_period of this SearchResult.  # noqa: E501
        :type: int
        """

        self._validity_period = validity_period

    @property
    def nf_instances(self):
        """Gets the nf_instances of this SearchResult.  # noqa: E501


        :return: The nf_instances of this SearchResult.  # noqa: E501
        :rtype: list[NFProfile]
        """
        return self._nf_instances

    @nf_instances.setter
    def nf_instances(self, nf_instances):
        """Sets the nf_instances of this SearchResult.


        :param nf_instances: The nf_instances of this SearchResult.  # noqa: E501
        :type: list[NFProfile]
        """
        if self.local_vars_configuration.client_side_validation and nf_instances is None:  # noqa: E501
            raise ValueError("Invalid value for `nf_instances`, must not be `None`")  # noqa: E501

        self._nf_instances = nf_instances

    @property
    def search_id(self):
        """Gets the search_id of this SearchResult.  # noqa: E501


        :return: The search_id of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._search_id

    @search_id.setter
    def search_id(self, search_id):
        """Sets the search_id of this SearchResult.


        :param search_id: The search_id of this SearchResult.  # noqa: E501
        :type: str
        """

        self._search_id = search_id

    @property
    def num_nf_inst_complete(self):
        """Gets the num_nf_inst_complete of this SearchResult.  # noqa: E501


        :return: The num_nf_inst_complete of this SearchResult.  # noqa: E501
        :rtype: int
        """
        return self._num_nf_inst_complete

    @num_nf_inst_complete.setter
    def num_nf_inst_complete(self, num_nf_inst_complete):
        """Sets the num_nf_inst_complete of this SearchResult.


        :param num_nf_inst_complete: The num_nf_inst_complete of this SearchResult.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_nf_inst_complete is not None and num_nf_inst_complete < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_nf_inst_complete`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_nf_inst_complete = num_nf_inst_complete

    @property
    def preferred_search(self):
        """Gets the preferred_search of this SearchResult.  # noqa: E501


        :return: The preferred_search of this SearchResult.  # noqa: E501
        :rtype: PreferredSearch
        """
        return self._preferred_search

    @preferred_search.setter
    def preferred_search(self, preferred_search):
        """Sets the preferred_search of this SearchResult.


        :param preferred_search: The preferred_search of this SearchResult.  # noqa: E501
        :type: PreferredSearch
        """

        self._preferred_search = preferred_search

    @property
    def nrf_supported_features(self):
        """Gets the nrf_supported_features of this SearchResult.  # noqa: E501


        :return: The nrf_supported_features of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._nrf_supported_features

    @nrf_supported_features.setter
    def nrf_supported_features(self, nrf_supported_features):
        """Sets the nrf_supported_features of this SearchResult.


        :param nrf_supported_features: The nrf_supported_features of this SearchResult.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                nrf_supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', nrf_supported_features)):  # noqa: E501
            raise ValueError(r"Invalid value for `nrf_supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._nrf_supported_features = nrf_supported_features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchResult):
            return True

        return self.to_dict() != other.to_dict()
