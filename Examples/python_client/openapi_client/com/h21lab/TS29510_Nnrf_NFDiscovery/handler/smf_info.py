# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SmfInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        's_nssai_smf_info_list': 'list[SnssaiSmfInfoItem]',
        'tai_list': 'list[Tai]',
        'tai_range_list': 'list[TaiRange]',
        'pgw_fqdn': 'str',
        'access_type': 'list[AccessType]',
        'priority': 'int'
    }

    attribute_map = {
        's_nssai_smf_info_list': 'sNssaiSmfInfoList',
        'tai_list': 'taiList',
        'tai_range_list': 'taiRangeList',
        'pgw_fqdn': 'pgwFqdn',
        'access_type': 'accessType',
        'priority': 'priority'
    }

    def __init__(self, s_nssai_smf_info_list=None, tai_list=None, tai_range_list=None, pgw_fqdn=None, access_type=None, priority=None, local_vars_configuration=None):  # noqa: E501
        """SmfInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._s_nssai_smf_info_list = None
        self._tai_list = None
        self._tai_range_list = None
        self._pgw_fqdn = None
        self._access_type = None
        self._priority = None
        self.discriminator = None

        self.s_nssai_smf_info_list = s_nssai_smf_info_list
        if tai_list is not None:
            self.tai_list = tai_list
        if tai_range_list is not None:
            self.tai_range_list = tai_range_list
        if pgw_fqdn is not None:
            self.pgw_fqdn = pgw_fqdn
        if access_type is not None:
            self.access_type = access_type
        if priority is not None:
            self.priority = priority

    @property
    def s_nssai_smf_info_list(self):
        """Gets the s_nssai_smf_info_list of this SmfInfo.  # noqa: E501


        :return: The s_nssai_smf_info_list of this SmfInfo.  # noqa: E501
        :rtype: list[SnssaiSmfInfoItem]
        """
        return self._s_nssai_smf_info_list

    @s_nssai_smf_info_list.setter
    def s_nssai_smf_info_list(self, s_nssai_smf_info_list):
        """Sets the s_nssai_smf_info_list of this SmfInfo.


        :param s_nssai_smf_info_list: The s_nssai_smf_info_list of this SmfInfo.  # noqa: E501
        :type: list[SnssaiSmfInfoItem]
        """
        if self.local_vars_configuration.client_side_validation and s_nssai_smf_info_list is None:  # noqa: E501
            raise ValueError("Invalid value for `s_nssai_smf_info_list`, must not be `None`")  # noqa: E501

        self._s_nssai_smf_info_list = s_nssai_smf_info_list

    @property
    def tai_list(self):
        """Gets the tai_list of this SmfInfo.  # noqa: E501


        :return: The tai_list of this SmfInfo.  # noqa: E501
        :rtype: list[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this SmfInfo.


        :param tai_list: The tai_list of this SmfInfo.  # noqa: E501
        :type: list[Tai]
        """

        self._tai_list = tai_list

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this SmfInfo.  # noqa: E501


        :return: The tai_range_list of this SmfInfo.  # noqa: E501
        :rtype: list[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this SmfInfo.


        :param tai_range_list: The tai_range_list of this SmfInfo.  # noqa: E501
        :type: list[TaiRange]
        """

        self._tai_range_list = tai_range_list

    @property
    def pgw_fqdn(self):
        """Gets the pgw_fqdn of this SmfInfo.  # noqa: E501

        Fully Qualified Domain Name  # noqa: E501

        :return: The pgw_fqdn of this SmfInfo.  # noqa: E501
        :rtype: str
        """
        return self._pgw_fqdn

    @pgw_fqdn.setter
    def pgw_fqdn(self, pgw_fqdn):
        """Sets the pgw_fqdn of this SmfInfo.

        Fully Qualified Domain Name  # noqa: E501

        :param pgw_fqdn: The pgw_fqdn of this SmfInfo.  # noqa: E501
        :type: str
        """

        self._pgw_fqdn = pgw_fqdn

    @property
    def access_type(self):
        """Gets the access_type of this SmfInfo.  # noqa: E501


        :return: The access_type of this SmfInfo.  # noqa: E501
        :rtype: list[AccessType]
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this SmfInfo.


        :param access_type: The access_type of this SmfInfo.  # noqa: E501
        :type: list[AccessType]
        """

        self._access_type = access_type

    @property
    def priority(self):
        """Gets the priority of this SmfInfo.  # noqa: E501


        :return: The priority of this SmfInfo.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SmfInfo.


        :param priority: The priority of this SmfInfo.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority > 65535):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority < 0):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmfInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmfInfo):
            return True

        return self.to_dict() != other.to_dict()
