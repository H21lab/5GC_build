# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UpfInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        's_nssai_upf_info_list': 'list[SnssaiUpfInfoItem]',
        'smf_serving_area': 'list[str]',
        'interface_upf_info_list': 'list[InterfaceUpfInfoItem]',
        'iwk_eps_ind': 'bool',
        'pdu_session_types': 'list[PduSessionType]',
        'atsss_capability': 'AtsssCapability',
        'ue_ip_addr_ind': 'bool',
        'tai_list': 'list[Tai]',
        'w_agf_info': 'WAgfInfo',
        'tngf_info': 'TngfInfo',
        'twif_info': 'TwifInfo',
        'priority': 'int',
        'redundant_gtpu': 'bool'
    }

    attribute_map = {
        's_nssai_upf_info_list': 'sNssaiUpfInfoList',
        'smf_serving_area': 'smfServingArea',
        'interface_upf_info_list': 'interfaceUpfInfoList',
        'iwk_eps_ind': 'iwkEpsInd',
        'pdu_session_types': 'pduSessionTypes',
        'atsss_capability': 'atsssCapability',
        'ue_ip_addr_ind': 'ueIpAddrInd',
        'tai_list': 'taiList',
        'w_agf_info': 'wAgfInfo',
        'tngf_info': 'tngfInfo',
        'twif_info': 'twifInfo',
        'priority': 'priority',
        'redundant_gtpu': 'redundantGtpu'
    }

    def __init__(self, s_nssai_upf_info_list=None, smf_serving_area=None, interface_upf_info_list=None, iwk_eps_ind=False, pdu_session_types=None, atsss_capability=None, ue_ip_addr_ind=False, tai_list=None, w_agf_info=None, tngf_info=None, twif_info=None, priority=None, redundant_gtpu=False, local_vars_configuration=None):  # noqa: E501
        """UpfInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._s_nssai_upf_info_list = None
        self._smf_serving_area = None
        self._interface_upf_info_list = None
        self._iwk_eps_ind = None
        self._pdu_session_types = None
        self._atsss_capability = None
        self._ue_ip_addr_ind = None
        self._tai_list = None
        self._w_agf_info = None
        self._tngf_info = None
        self._twif_info = None
        self._priority = None
        self._redundant_gtpu = None
        self.discriminator = None

        self.s_nssai_upf_info_list = s_nssai_upf_info_list
        if smf_serving_area is not None:
            self.smf_serving_area = smf_serving_area
        if interface_upf_info_list is not None:
            self.interface_upf_info_list = interface_upf_info_list
        if iwk_eps_ind is not None:
            self.iwk_eps_ind = iwk_eps_ind
        if pdu_session_types is not None:
            self.pdu_session_types = pdu_session_types
        if atsss_capability is not None:
            self.atsss_capability = atsss_capability
        if ue_ip_addr_ind is not None:
            self.ue_ip_addr_ind = ue_ip_addr_ind
        if tai_list is not None:
            self.tai_list = tai_list
        if w_agf_info is not None:
            self.w_agf_info = w_agf_info
        if tngf_info is not None:
            self.tngf_info = tngf_info
        if twif_info is not None:
            self.twif_info = twif_info
        if priority is not None:
            self.priority = priority
        if redundant_gtpu is not None:
            self.redundant_gtpu = redundant_gtpu

    @property
    def s_nssai_upf_info_list(self):
        """Gets the s_nssai_upf_info_list of this UpfInfo.  # noqa: E501


        :return: The s_nssai_upf_info_list of this UpfInfo.  # noqa: E501
        :rtype: list[SnssaiUpfInfoItem]
        """
        return self._s_nssai_upf_info_list

    @s_nssai_upf_info_list.setter
    def s_nssai_upf_info_list(self, s_nssai_upf_info_list):
        """Sets the s_nssai_upf_info_list of this UpfInfo.


        :param s_nssai_upf_info_list: The s_nssai_upf_info_list of this UpfInfo.  # noqa: E501
        :type: list[SnssaiUpfInfoItem]
        """
        if self.local_vars_configuration.client_side_validation and s_nssai_upf_info_list is None:  # noqa: E501
            raise ValueError("Invalid value for `s_nssai_upf_info_list`, must not be `None`")  # noqa: E501

        self._s_nssai_upf_info_list = s_nssai_upf_info_list

    @property
    def smf_serving_area(self):
        """Gets the smf_serving_area of this UpfInfo.  # noqa: E501


        :return: The smf_serving_area of this UpfInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._smf_serving_area

    @smf_serving_area.setter
    def smf_serving_area(self, smf_serving_area):
        """Sets the smf_serving_area of this UpfInfo.


        :param smf_serving_area: The smf_serving_area of this UpfInfo.  # noqa: E501
        :type: list[str]
        """

        self._smf_serving_area = smf_serving_area

    @property
    def interface_upf_info_list(self):
        """Gets the interface_upf_info_list of this UpfInfo.  # noqa: E501


        :return: The interface_upf_info_list of this UpfInfo.  # noqa: E501
        :rtype: list[InterfaceUpfInfoItem]
        """
        return self._interface_upf_info_list

    @interface_upf_info_list.setter
    def interface_upf_info_list(self, interface_upf_info_list):
        """Sets the interface_upf_info_list of this UpfInfo.


        :param interface_upf_info_list: The interface_upf_info_list of this UpfInfo.  # noqa: E501
        :type: list[InterfaceUpfInfoItem]
        """

        self._interface_upf_info_list = interface_upf_info_list

    @property
    def iwk_eps_ind(self):
        """Gets the iwk_eps_ind of this UpfInfo.  # noqa: E501


        :return: The iwk_eps_ind of this UpfInfo.  # noqa: E501
        :rtype: bool
        """
        return self._iwk_eps_ind

    @iwk_eps_ind.setter
    def iwk_eps_ind(self, iwk_eps_ind):
        """Sets the iwk_eps_ind of this UpfInfo.


        :param iwk_eps_ind: The iwk_eps_ind of this UpfInfo.  # noqa: E501
        :type: bool
        """

        self._iwk_eps_ind = iwk_eps_ind

    @property
    def pdu_session_types(self):
        """Gets the pdu_session_types of this UpfInfo.  # noqa: E501


        :return: The pdu_session_types of this UpfInfo.  # noqa: E501
        :rtype: list[PduSessionType]
        """
        return self._pdu_session_types

    @pdu_session_types.setter
    def pdu_session_types(self, pdu_session_types):
        """Sets the pdu_session_types of this UpfInfo.


        :param pdu_session_types: The pdu_session_types of this UpfInfo.  # noqa: E501
        :type: list[PduSessionType]
        """

        self._pdu_session_types = pdu_session_types

    @property
    def atsss_capability(self):
        """Gets the atsss_capability of this UpfInfo.  # noqa: E501


        :return: The atsss_capability of this UpfInfo.  # noqa: E501
        :rtype: AtsssCapability
        """
        return self._atsss_capability

    @atsss_capability.setter
    def atsss_capability(self, atsss_capability):
        """Sets the atsss_capability of this UpfInfo.


        :param atsss_capability: The atsss_capability of this UpfInfo.  # noqa: E501
        :type: AtsssCapability
        """

        self._atsss_capability = atsss_capability

    @property
    def ue_ip_addr_ind(self):
        """Gets the ue_ip_addr_ind of this UpfInfo.  # noqa: E501


        :return: The ue_ip_addr_ind of this UpfInfo.  # noqa: E501
        :rtype: bool
        """
        return self._ue_ip_addr_ind

    @ue_ip_addr_ind.setter
    def ue_ip_addr_ind(self, ue_ip_addr_ind):
        """Sets the ue_ip_addr_ind of this UpfInfo.


        :param ue_ip_addr_ind: The ue_ip_addr_ind of this UpfInfo.  # noqa: E501
        :type: bool
        """

        self._ue_ip_addr_ind = ue_ip_addr_ind

    @property
    def tai_list(self):
        """Gets the tai_list of this UpfInfo.  # noqa: E501


        :return: The tai_list of this UpfInfo.  # noqa: E501
        :rtype: list[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this UpfInfo.


        :param tai_list: The tai_list of this UpfInfo.  # noqa: E501
        :type: list[Tai]
        """

        self._tai_list = tai_list

    @property
    def w_agf_info(self):
        """Gets the w_agf_info of this UpfInfo.  # noqa: E501


        :return: The w_agf_info of this UpfInfo.  # noqa: E501
        :rtype: WAgfInfo
        """
        return self._w_agf_info

    @w_agf_info.setter
    def w_agf_info(self, w_agf_info):
        """Sets the w_agf_info of this UpfInfo.


        :param w_agf_info: The w_agf_info of this UpfInfo.  # noqa: E501
        :type: WAgfInfo
        """

        self._w_agf_info = w_agf_info

    @property
    def tngf_info(self):
        """Gets the tngf_info of this UpfInfo.  # noqa: E501


        :return: The tngf_info of this UpfInfo.  # noqa: E501
        :rtype: TngfInfo
        """
        return self._tngf_info

    @tngf_info.setter
    def tngf_info(self, tngf_info):
        """Sets the tngf_info of this UpfInfo.


        :param tngf_info: The tngf_info of this UpfInfo.  # noqa: E501
        :type: TngfInfo
        """

        self._tngf_info = tngf_info

    @property
    def twif_info(self):
        """Gets the twif_info of this UpfInfo.  # noqa: E501


        :return: The twif_info of this UpfInfo.  # noqa: E501
        :rtype: TwifInfo
        """
        return self._twif_info

    @twif_info.setter
    def twif_info(self, twif_info):
        """Sets the twif_info of this UpfInfo.


        :param twif_info: The twif_info of this UpfInfo.  # noqa: E501
        :type: TwifInfo
        """

        self._twif_info = twif_info

    @property
    def priority(self):
        """Gets the priority of this UpfInfo.  # noqa: E501


        :return: The priority of this UpfInfo.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UpfInfo.


        :param priority: The priority of this UpfInfo.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority > 65535):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority < 0):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def redundant_gtpu(self):
        """Gets the redundant_gtpu of this UpfInfo.  # noqa: E501


        :return: The redundant_gtpu of this UpfInfo.  # noqa: E501
        :rtype: bool
        """
        return self._redundant_gtpu

    @redundant_gtpu.setter
    def redundant_gtpu(self, redundant_gtpu):
        """Sets the redundant_gtpu of this UpfInfo.


        :param redundant_gtpu: The redundant_gtpu of this UpfInfo.  # noqa: E501
        :type: bool
        """

        self._redundant_gtpu = redundant_gtpu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpfInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpfInfo):
            return True

        return self.to_dict() != other.to_dict()
