# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class WAgfInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ipv4_endpoint_addresses': 'list[str]',
        'ipv6_endpoint_addresses': 'list[Ipv6Addr]',
        'endpoint_fqdn': 'str'
    }

    attribute_map = {
        'ipv4_endpoint_addresses': 'ipv4EndpointAddresses',
        'ipv6_endpoint_addresses': 'ipv6EndpointAddresses',
        'endpoint_fqdn': 'endpointFqdn'
    }

    def __init__(self, ipv4_endpoint_addresses=None, ipv6_endpoint_addresses=None, endpoint_fqdn=None, local_vars_configuration=None):  # noqa: E501
        """WAgfInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ipv4_endpoint_addresses = None
        self._ipv6_endpoint_addresses = None
        self._endpoint_fqdn = None
        self.discriminator = None

        if ipv4_endpoint_addresses is not None:
            self.ipv4_endpoint_addresses = ipv4_endpoint_addresses
        if ipv6_endpoint_addresses is not None:
            self.ipv6_endpoint_addresses = ipv6_endpoint_addresses
        if endpoint_fqdn is not None:
            self.endpoint_fqdn = endpoint_fqdn

    @property
    def ipv4_endpoint_addresses(self):
        """Gets the ipv4_endpoint_addresses of this WAgfInfo.  # noqa: E501


        :return: The ipv4_endpoint_addresses of this WAgfInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._ipv4_endpoint_addresses

    @ipv4_endpoint_addresses.setter
    def ipv4_endpoint_addresses(self, ipv4_endpoint_addresses):
        """Sets the ipv4_endpoint_addresses of this WAgfInfo.


        :param ipv4_endpoint_addresses: The ipv4_endpoint_addresses of this WAgfInfo.  # noqa: E501
        :type: list[str]
        """

        self._ipv4_endpoint_addresses = ipv4_endpoint_addresses

    @property
    def ipv6_endpoint_addresses(self):
        """Gets the ipv6_endpoint_addresses of this WAgfInfo.  # noqa: E501


        :return: The ipv6_endpoint_addresses of this WAgfInfo.  # noqa: E501
        :rtype: list[Ipv6Addr]
        """
        return self._ipv6_endpoint_addresses

    @ipv6_endpoint_addresses.setter
    def ipv6_endpoint_addresses(self, ipv6_endpoint_addresses):
        """Sets the ipv6_endpoint_addresses of this WAgfInfo.


        :param ipv6_endpoint_addresses: The ipv6_endpoint_addresses of this WAgfInfo.  # noqa: E501
        :type: list[Ipv6Addr]
        """

        self._ipv6_endpoint_addresses = ipv6_endpoint_addresses

    @property
    def endpoint_fqdn(self):
        """Gets the endpoint_fqdn of this WAgfInfo.  # noqa: E501

        Fully Qualified Domain Name  # noqa: E501

        :return: The endpoint_fqdn of this WAgfInfo.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_fqdn

    @endpoint_fqdn.setter
    def endpoint_fqdn(self, endpoint_fqdn):
        """Sets the endpoint_fqdn of this WAgfInfo.

        Fully Qualified Domain Name  # noqa: E501

        :param endpoint_fqdn: The endpoint_fqdn of this WAgfInfo.  # noqa: E501
        :type: str
        """

        self._endpoint_fqdn = endpoint_fqdn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WAgfInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WAgfInfo):
            return True

        return self.to_dict() != other.to_dict()
