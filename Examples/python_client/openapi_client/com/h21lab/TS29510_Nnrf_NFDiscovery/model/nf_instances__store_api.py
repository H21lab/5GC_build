# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class NFInstancesStoreApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search_nf_instances(self, target_nf_type, requester_nf_type, **kwargs):  # noqa: E501
        """Search a collection of NF Instances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_nf_instances(target_nf_type, requester_nf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param NFType target_nf_type: Type of the target NF (required)
        :param NFType requester_nf_type: Type of the requester NF (required)
        :param str accept_encoding: Accept-Encoding, described in IETF RFC 7231
        :param str requester_nf_instance_id: NfInstanceId of the requester NF
        :param list[ServiceName] service_names: Names of the services offered by the NF
        :param str requester_nf_instance_fqdn: FQDN of the requester NF
        :param list[PlmnId] target_plmn_list: Id of the PLMN of the target NF
        :param list[PlmnId] requester_plmn_list: Id of the PLMN where the NF issuing the Discovery request is located
        :param str target_nf_instance_id: Identity of the NF instance being discovered
        :param str target_nf_fqdn: FQDN of the NF instance being discovered
        :param str hnrf_uri: Uri of the home NRF
        :param list[Snssai] snssais: Slice info of the target NF
        :param list[Snssai] requester_snssais: Slice info of the requester NF
        :param list[PlmnSnssai] plmn_specific_snssai_list: PLMN specific Slice info of the target NF
        :param str dnn: Dnn supported by the BSF, SMF or UPF
        :param list[str] nsi_list: NSI IDs that are served by the services being discovered
        :param str smf_serving_area:
        :param Tai tai: Tracking Area Identity
        :param str amf_region_id: AMF Region Identity
        :param str amf_set_id: AMF Set Identity
        :param Guami guami: Guami used to search for an appropriate AMF
        :param str supi: SUPI of the user
        :param str ue_ipv4_address: IPv4 address of the UE
        :param str ip_domain: IP domain of the UE, which supported by BSF
        :param Ipv6Prefix ue_ipv6_prefix: IPv6 prefix of the UE
        :param bool pgw_ind: Combined PGW-C and SMF or a standalone SMF
        :param str pgw: PGW FQDN of a combined PGW-C and SMF
        :param str gpsi: GPSI of the user
        :param str external_group_identity: external group identifier of the user
        :param str internal_group_identity: internal group identifier of the user
        :param PfdData pfd_data: PFD data
        :param DataSetId data_set: data set supported by the NF
        :param str routing_indicator: routing indicator in SUCI
        :param list[str] group_id_list: Group IDs of the NFs being discovered
        :param list[str] dnai_list: Data network access identifiers of the NFs being discovered
        :param list[PduSessionType] pdu_session_types: list of PDU Session Type required to be supported by the target NF
        :param list[EventId] event_id_list: Analytics event(s) requested to be supported by the Nnwdaf_AnalyticsInfo service
        :param list[NwdafEvent] nwdaf_event_list: Analytics event(s) requested to be supported by the Nnwdaf_EventsSubscription service.
        :param str supported_features: Features required to be supported by the target NF
        :param bool upf_iwk_eps_ind: UPF supporting interworking with EPS or not
        :param PlmnId chf_supported_plmn: PLMN ID supported by a CHF
        :param str preferred_locality: preferred target NF location
        :param AccessType access_type: AccessType supported by the target NF
        :param int limit: Maximum number of NFProfiles to return in the response
        :param list[str] required_features: Features required to be supported by the target NF
        :param ComplexQuery complex_query: the complex query condition expression
        :param int max_payload_size: Maximum payload size of the response expressed in kilo octets
        :param AtsssCapability atsss_capability: ATSSS Capability
        :param bool upf_ue_ip_addr_ind: UPF supporting allocating UE IP addresses/prefixes
        :param ExternalClientType client_type: Requested client type served by the NF
        :param str lmf_id: LMF identification to be discovered
        :param AnNodeType an_node_type: Requested AN node type served by the NF
        :param RatType rat_type: Requested RAT type served by the NF
        :param Tai preferred_tai: preferred Tracking Area Identity
        :param list[str] preferred_nf_instances: preferred NF Instances
        :param str if_none_match: Validator for conditional requests, as described in IETF RFC 7232, 3.2
        :param PlmnIdNid target_snpn: Target SNPN Identity
        :param AfEventExposureData af_ee_data: NEF exposured by the AF
        :param WAgfInfo w_agf_info: UPF collocated with W-AGF
        :param TngfInfo tngf_info: UPF collocated with TNGF
        :param TwifInfo twif_info: UPF collocated with TWIF
        :param str target_nf_set_id: Target NF Set ID
        :param str target_nf_service_set_id: Target NF Service Set ID
        :param str nef_id: NEF ID
        :param NotificationType notification_type: Notification Type
        :param list[str] serving_scope: areas that can be served by the target NF
        :param str imsi: IMSI of the requester UE to search for an appropriate NF (e.g. HSS)
        :param dict(str, str) preferred_api_versions: Preferred API version of the services to be discovered
        :param bool v2x_support_ind: PCF supports V2X
        :param bool redundant_gtpu: UPF supports redundant gtp-u to be discovered
        :param bool redundant_transport: UPF supports redundant transport path to be discovered
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_nf_instances_with_http_info(target_nf_type, requester_nf_type, **kwargs)  # noqa: E501

    def search_nf_instances_with_http_info(self, target_nf_type, requester_nf_type, **kwargs):  # noqa: E501
        """Search a collection of NF Instances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_nf_instances_with_http_info(target_nf_type, requester_nf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param NFType target_nf_type: Type of the target NF (required)
        :param NFType requester_nf_type: Type of the requester NF (required)
        :param str accept_encoding: Accept-Encoding, described in IETF RFC 7231
        :param str requester_nf_instance_id: NfInstanceId of the requester NF
        :param list[ServiceName] service_names: Names of the services offered by the NF
        :param str requester_nf_instance_fqdn: FQDN of the requester NF
        :param list[PlmnId] target_plmn_list: Id of the PLMN of the target NF
        :param list[PlmnId] requester_plmn_list: Id of the PLMN where the NF issuing the Discovery request is located
        :param str target_nf_instance_id: Identity of the NF instance being discovered
        :param str target_nf_fqdn: FQDN of the NF instance being discovered
        :param str hnrf_uri: Uri of the home NRF
        :param list[Snssai] snssais: Slice info of the target NF
        :param list[Snssai] requester_snssais: Slice info of the requester NF
        :param list[PlmnSnssai] plmn_specific_snssai_list: PLMN specific Slice info of the target NF
        :param str dnn: Dnn supported by the BSF, SMF or UPF
        :param list[str] nsi_list: NSI IDs that are served by the services being discovered
        :param str smf_serving_area:
        :param Tai tai: Tracking Area Identity
        :param str amf_region_id: AMF Region Identity
        :param str amf_set_id: AMF Set Identity
        :param Guami guami: Guami used to search for an appropriate AMF
        :param str supi: SUPI of the user
        :param str ue_ipv4_address: IPv4 address of the UE
        :param str ip_domain: IP domain of the UE, which supported by BSF
        :param Ipv6Prefix ue_ipv6_prefix: IPv6 prefix of the UE
        :param bool pgw_ind: Combined PGW-C and SMF or a standalone SMF
        :param str pgw: PGW FQDN of a combined PGW-C and SMF
        :param str gpsi: GPSI of the user
        :param str external_group_identity: external group identifier of the user
        :param str internal_group_identity: internal group identifier of the user
        :param PfdData pfd_data: PFD data
        :param DataSetId data_set: data set supported by the NF
        :param str routing_indicator: routing indicator in SUCI
        :param list[str] group_id_list: Group IDs of the NFs being discovered
        :param list[str] dnai_list: Data network access identifiers of the NFs being discovered
        :param list[PduSessionType] pdu_session_types: list of PDU Session Type required to be supported by the target NF
        :param list[EventId] event_id_list: Analytics event(s) requested to be supported by the Nnwdaf_AnalyticsInfo service
        :param list[NwdafEvent] nwdaf_event_list: Analytics event(s) requested to be supported by the Nnwdaf_EventsSubscription service.
        :param str supported_features: Features required to be supported by the target NF
        :param bool upf_iwk_eps_ind: UPF supporting interworking with EPS or not
        :param PlmnId chf_supported_plmn: PLMN ID supported by a CHF
        :param str preferred_locality: preferred target NF location
        :param AccessType access_type: AccessType supported by the target NF
        :param int limit: Maximum number of NFProfiles to return in the response
        :param list[str] required_features: Features required to be supported by the target NF
        :param ComplexQuery complex_query: the complex query condition expression
        :param int max_payload_size: Maximum payload size of the response expressed in kilo octets
        :param AtsssCapability atsss_capability: ATSSS Capability
        :param bool upf_ue_ip_addr_ind: UPF supporting allocating UE IP addresses/prefixes
        :param ExternalClientType client_type: Requested client type served by the NF
        :param str lmf_id: LMF identification to be discovered
        :param AnNodeType an_node_type: Requested AN node type served by the NF
        :param RatType rat_type: Requested RAT type served by the NF
        :param Tai preferred_tai: preferred Tracking Area Identity
        :param list[str] preferred_nf_instances: preferred NF Instances
        :param str if_none_match: Validator for conditional requests, as described in IETF RFC 7232, 3.2
        :param PlmnIdNid target_snpn: Target SNPN Identity
        :param AfEventExposureData af_ee_data: NEF exposured by the AF
        :param WAgfInfo w_agf_info: UPF collocated with W-AGF
        :param TngfInfo tngf_info: UPF collocated with TNGF
        :param TwifInfo twif_info: UPF collocated with TWIF
        :param str target_nf_set_id: Target NF Set ID
        :param str target_nf_service_set_id: Target NF Service Set ID
        :param str nef_id: NEF ID
        :param NotificationType notification_type: Notification Type
        :param list[str] serving_scope: areas that can be served by the target NF
        :param str imsi: IMSI of the requester UE to search for an appropriate NF (e.g. HSS)
        :param dict(str, str) preferred_api_versions: Preferred API version of the services to be discovered
        :param bool v2x_support_ind: PCF supports V2X
        :param bool redundant_gtpu: UPF supports redundant gtp-u to be discovered
        :param bool redundant_transport: UPF supports redundant transport path to be discovered
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SearchResult, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'target_nf_type',
            'requester_nf_type',
            'accept_encoding',
            'requester_nf_instance_id',
            'service_names',
            'requester_nf_instance_fqdn',
            'target_plmn_list',
            'requester_plmn_list',
            'target_nf_instance_id',
            'target_nf_fqdn',
            'hnrf_uri',
            'snssais',
            'requester_snssais',
            'plmn_specific_snssai_list',
            'dnn',
            'nsi_list',
            'smf_serving_area',
            'tai',
            'amf_region_id',
            'amf_set_id',
            'guami',
            'supi',
            'ue_ipv4_address',
            'ip_domain',
            'ue_ipv6_prefix',
            'pgw_ind',
            'pgw',
            'gpsi',
            'external_group_identity',
            'internal_group_identity',
            'pfd_data',
            'data_set',
            'routing_indicator',
            'group_id_list',
            'dnai_list',
            'pdu_session_types',
            'event_id_list',
            'nwdaf_event_list',
            'supported_features',
            'upf_iwk_eps_ind',
            'chf_supported_plmn',
            'preferred_locality',
            'access_type',
            'limit',
            'required_features',
            'complex_query',
            'max_payload_size',
            'atsss_capability',
            'upf_ue_ip_addr_ind',
            'client_type',
            'lmf_id',
            'an_node_type',
            'rat_type',
            'preferred_tai',
            'preferred_nf_instances',
            'if_none_match',
            'target_snpn',
            'af_ee_data',
            'w_agf_info',
            'tngf_info',
            'twif_info',
            'target_nf_set_id',
            'target_nf_service_set_id',
            'nef_id',
            'notification_type',
            'serving_scope',
            'imsi',
            'preferred_api_versions',
            'v2x_support_ind',
            'redundant_gtpu',
            'redundant_transport'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_nf_instances" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'target_nf_type' is set
        if self.api_client.client_side_validation and ('target_nf_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['target_nf_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `target_nf_type` when calling `search_nf_instances`")  # noqa: E501
        # verify the required parameter 'requester_nf_type' is set
        if self.api_client.client_side_validation and ('requester_nf_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['requester_nf_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `requester_nf_type` when calling `search_nf_instances`")  # noqa: E501

        if self.api_client.client_side_validation and ('service_names' in local_var_params and  # noqa: E501
                                                        len(local_var_params['service_names']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `service_names` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('target_plmn_list' in local_var_params and  # noqa: E501
                                                        len(local_var_params['target_plmn_list']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `target_plmn_list` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('requester_plmn_list' in local_var_params and  # noqa: E501
                                                        len(local_var_params['requester_plmn_list']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `requester_plmn_list` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('snssais' in local_var_params and  # noqa: E501
                                                        len(local_var_params['snssais']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `snssais` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('requester_snssais' in local_var_params and  # noqa: E501
                                                        len(local_var_params['requester_snssais']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `requester_snssais` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('plmn_specific_snssai_list' in local_var_params and  # noqa: E501
                                                        len(local_var_params['plmn_specific_snssai_list']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `plmn_specific_snssai_list` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('nsi_list' in local_var_params and  # noqa: E501
                                                        len(local_var_params['nsi_list']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `nsi_list` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'amf_region_id' in local_var_params and not re.search(r'^[A-Fa-f0-9]{2}$', local_var_params['amf_region_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `amf_region_id` when calling `search_nf_instances`, must conform to the pattern `/^[A-Fa-f0-9]{2}$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'amf_set_id' in local_var_params and not re.search(r'^[0-3][A-Fa-f0-9]{2}$', local_var_params['amf_set_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `amf_set_id` when calling `search_nf_instances`, must conform to the pattern `/^[0-3][A-Fa-f0-9]{2}$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'supi' in local_var_params and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', local_var_params['supi']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `supi` when calling `search_nf_instances`, must conform to the pattern `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'ue_ipv4_address' in local_var_params and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', local_var_params['ue_ipv4_address']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `ue_ipv4_address` when calling `search_nf_instances`, must conform to the pattern `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'gpsi' in local_var_params and not re.search(r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$', local_var_params['gpsi']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `gpsi` when calling `search_nf_instances`, must conform to the pattern `/^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'external_group_identity' in local_var_params and not re.search(r'^extgroupid-[^@]+@[^@]+$', local_var_params['external_group_identity']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `external_group_identity` when calling `search_nf_instances`, must conform to the pattern `/^extgroupid-[^@]+@[^@]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'internal_group_identity' in local_var_params and not re.search(r'^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$', local_var_params['internal_group_identity']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `internal_group_identity` when calling `search_nf_instances`, must conform to the pattern `/^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'routing_indicator' in local_var_params and not re.search(r'^[0-9]{1,4}$', local_var_params['routing_indicator']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `routing_indicator` when calling `search_nf_instances`, must conform to the pattern `/^[0-9]{1,4}$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('group_id_list' in local_var_params and  # noqa: E501
                                                        len(local_var_params['group_id_list']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `group_id_list` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('dnai_list' in local_var_params and  # noqa: E501
                                                        len(local_var_params['dnai_list']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `dnai_list` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('pdu_session_types' in local_var_params and  # noqa: E501
                                                        len(local_var_params['pdu_session_types']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pdu_session_types` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('event_id_list' in local_var_params and  # noqa: E501
                                                        len(local_var_params['event_id_list']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `event_id_list` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('nwdaf_event_list' in local_var_params and  # noqa: E501
                                                        len(local_var_params['nwdaf_event_list']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `nwdaf_event_list` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'supported_features' in local_var_params and not re.search(r'^[A-Fa-f0-9]*$', local_var_params['supported_features']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `supported_features` when calling `search_nf_instances`, must conform to the pattern `/^[A-Fa-f0-9]*$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `search_nf_instances`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('required_features' in local_var_params and  # noqa: E501
                                                        len(local_var_params['required_features']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `required_features` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'max_payload_size' in local_var_params and local_var_params['max_payload_size'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `max_payload_size` when calling `search_nf_instances`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and ('preferred_nf_instances' in local_var_params and  # noqa: E501
                                                        len(local_var_params['preferred_nf_instances']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `preferred_nf_instances` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('serving_scope' in local_var_params and  # noqa: E501
                                                        len(local_var_params['serving_scope']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `serving_scope` when calling `search_nf_instances`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'target_nf_type' in local_var_params and local_var_params['target_nf_type'] is not None:  # noqa: E501
            query_params.append(('target-nf-type', local_var_params['target_nf_type']))  # noqa: E501
        if 'requester_nf_type' in local_var_params and local_var_params['requester_nf_type'] is not None:  # noqa: E501
            query_params.append(('requester-nf-type', local_var_params['requester_nf_type']))  # noqa: E501
        if 'requester_nf_instance_id' in local_var_params and local_var_params['requester_nf_instance_id'] is not None:  # noqa: E501
            query_params.append(('requester-nf-instance-id', local_var_params['requester_nf_instance_id']))  # noqa: E501
        if 'service_names' in local_var_params and local_var_params['service_names'] is not None:  # noqa: E501
            query_params.append(('service-names', local_var_params['service_names']))  # noqa: E501
            collection_formats['service-names'] = 'csv'  # noqa: E501
        if 'requester_nf_instance_fqdn' in local_var_params and local_var_params['requester_nf_instance_fqdn'] is not None:  # noqa: E501
            query_params.append(('requester-nf-instance-fqdn', local_var_params['requester_nf_instance_fqdn']))  # noqa: E501
        if 'target_plmn_list' in local_var_params and local_var_params['target_plmn_list'] is not None:  # noqa: E501
            query_params.append(('target-plmn-list', local_var_params['target_plmn_list']))  # noqa: E501
            collection_formats['target-plmn-list'] = 'multi'  # noqa: E501
        if 'requester_plmn_list' in local_var_params and local_var_params['requester_plmn_list'] is not None:  # noqa: E501
            query_params.append(('requester-plmn-list', local_var_params['requester_plmn_list']))  # noqa: E501
            collection_formats['requester-plmn-list'] = 'multi'  # noqa: E501
        if 'target_nf_instance_id' in local_var_params and local_var_params['target_nf_instance_id'] is not None:  # noqa: E501
            query_params.append(('target-nf-instance-id', local_var_params['target_nf_instance_id']))  # noqa: E501
        if 'target_nf_fqdn' in local_var_params and local_var_params['target_nf_fqdn'] is not None:  # noqa: E501
            query_params.append(('target-nf-fqdn', local_var_params['target_nf_fqdn']))  # noqa: E501
        if 'hnrf_uri' in local_var_params and local_var_params['hnrf_uri'] is not None:  # noqa: E501
            query_params.append(('hnrf-uri', local_var_params['hnrf_uri']))  # noqa: E501
        if 'snssais' in local_var_params and local_var_params['snssais'] is not None:  # noqa: E501
            query_params.append(('snssais', local_var_params['snssais']))  # noqa: E501
            collection_formats['snssais'] = 'multi'  # noqa: E501
        if 'requester_snssais' in local_var_params and local_var_params['requester_snssais'] is not None:  # noqa: E501
            query_params.append(('requester-snssais', local_var_params['requester_snssais']))  # noqa: E501
            collection_formats['requester-snssais'] = 'multi'  # noqa: E501
        if 'plmn_specific_snssai_list' in local_var_params and local_var_params['plmn_specific_snssai_list'] is not None:  # noqa: E501
            query_params.append(('plmn-specific-snssai-list', local_var_params['plmn_specific_snssai_list']))  # noqa: E501
            collection_formats['plmn-specific-snssai-list'] = 'multi'  # noqa: E501
        if 'dnn' in local_var_params and local_var_params['dnn'] is not None:  # noqa: E501
            query_params.append(('dnn', local_var_params['dnn']))  # noqa: E501
        if 'nsi_list' in local_var_params and local_var_params['nsi_list'] is not None:  # noqa: E501
            query_params.append(('nsi-list', local_var_params['nsi_list']))  # noqa: E501
            collection_formats['nsi-list'] = 'csv'  # noqa: E501
        if 'smf_serving_area' in local_var_params and local_var_params['smf_serving_area'] is not None:  # noqa: E501
            query_params.append(('smf-serving-area', local_var_params['smf_serving_area']))  # noqa: E501
        if 'tai' in local_var_params and local_var_params['tai'] is not None:  # noqa: E501
            query_params.append(('tai', local_var_params['tai']))  # noqa: E501
        if 'amf_region_id' in local_var_params and local_var_params['amf_region_id'] is not None:  # noqa: E501
            query_params.append(('amf-region-id', local_var_params['amf_region_id']))  # noqa: E501
        if 'amf_set_id' in local_var_params and local_var_params['amf_set_id'] is not None:  # noqa: E501
            query_params.append(('amf-set-id', local_var_params['amf_set_id']))  # noqa: E501
        if 'guami' in local_var_params and local_var_params['guami'] is not None:  # noqa: E501
            query_params.append(('guami', local_var_params['guami']))  # noqa: E501
        if 'supi' in local_var_params and local_var_params['supi'] is not None:  # noqa: E501
            query_params.append(('supi', local_var_params['supi']))  # noqa: E501
        if 'ue_ipv4_address' in local_var_params and local_var_params['ue_ipv4_address'] is not None:  # noqa: E501
            query_params.append(('ue-ipv4-address', local_var_params['ue_ipv4_address']))  # noqa: E501
        if 'ip_domain' in local_var_params and local_var_params['ip_domain'] is not None:  # noqa: E501
            query_params.append(('ip-domain', local_var_params['ip_domain']))  # noqa: E501
        if 'ue_ipv6_prefix' in local_var_params and local_var_params['ue_ipv6_prefix'] is not None:  # noqa: E501
            query_params.append(('ue-ipv6-prefix', local_var_params['ue_ipv6_prefix']))  # noqa: E501
        if 'pgw_ind' in local_var_params and local_var_params['pgw_ind'] is not None:  # noqa: E501
            query_params.append(('pgw-ind', local_var_params['pgw_ind']))  # noqa: E501
        if 'pgw' in local_var_params and local_var_params['pgw'] is not None:  # noqa: E501
            query_params.append(('pgw', local_var_params['pgw']))  # noqa: E501
        if 'gpsi' in local_var_params and local_var_params['gpsi'] is not None:  # noqa: E501
            query_params.append(('gpsi', local_var_params['gpsi']))  # noqa: E501
        if 'external_group_identity' in local_var_params and local_var_params['external_group_identity'] is not None:  # noqa: E501
            query_params.append(('external-group-identity', local_var_params['external_group_identity']))  # noqa: E501
        if 'internal_group_identity' in local_var_params and local_var_params['internal_group_identity'] is not None:  # noqa: E501
            query_params.append(('internal-group-identity', local_var_params['internal_group_identity']))  # noqa: E501
        if 'pfd_data' in local_var_params and local_var_params['pfd_data'] is not None:  # noqa: E501
            query_params.append(('pfd-data', local_var_params['pfd_data']))  # noqa: E501
        if 'data_set' in local_var_params and local_var_params['data_set'] is not None:  # noqa: E501
            query_params.append(('data-set', local_var_params['data_set']))  # noqa: E501
        if 'routing_indicator' in local_var_params and local_var_params['routing_indicator'] is not None:  # noqa: E501
            query_params.append(('routing-indicator', local_var_params['routing_indicator']))  # noqa: E501
        if 'group_id_list' in local_var_params and local_var_params['group_id_list'] is not None:  # noqa: E501
            query_params.append(('group-id-list', local_var_params['group_id_list']))  # noqa: E501
            collection_formats['group-id-list'] = 'csv'  # noqa: E501
        if 'dnai_list' in local_var_params and local_var_params['dnai_list'] is not None:  # noqa: E501
            query_params.append(('dnai-list', local_var_params['dnai_list']))  # noqa: E501
            collection_formats['dnai-list'] = 'csv'  # noqa: E501
        if 'pdu_session_types' in local_var_params and local_var_params['pdu_session_types'] is not None:  # noqa: E501
            query_params.append(('pdu-session-types', local_var_params['pdu_session_types']))  # noqa: E501
            collection_formats['pdu-session-types'] = 'csv'  # noqa: E501
        if 'event_id_list' in local_var_params and local_var_params['event_id_list'] is not None:  # noqa: E501
            query_params.append(('event-id-list', local_var_params['event_id_list']))  # noqa: E501
            collection_formats['event-id-list'] = 'csv'  # noqa: E501
        if 'nwdaf_event_list' in local_var_params and local_var_params['nwdaf_event_list'] is not None:  # noqa: E501
            query_params.append(('nwdaf-event-list', local_var_params['nwdaf_event_list']))  # noqa: E501
            collection_formats['nwdaf-event-list'] = 'csv'  # noqa: E501
        if 'supported_features' in local_var_params and local_var_params['supported_features'] is not None:  # noqa: E501
            query_params.append(('supported-features', local_var_params['supported_features']))  # noqa: E501
        if 'upf_iwk_eps_ind' in local_var_params and local_var_params['upf_iwk_eps_ind'] is not None:  # noqa: E501
            query_params.append(('upf-iwk-eps-ind', local_var_params['upf_iwk_eps_ind']))  # noqa: E501
        if 'chf_supported_plmn' in local_var_params and local_var_params['chf_supported_plmn'] is not None:  # noqa: E501
            query_params.append(('chf-supported-plmn', local_var_params['chf_supported_plmn']))  # noqa: E501
        if 'preferred_locality' in local_var_params and local_var_params['preferred_locality'] is not None:  # noqa: E501
            query_params.append(('preferred-locality', local_var_params['preferred_locality']))  # noqa: E501
        if 'access_type' in local_var_params and local_var_params['access_type'] is not None:  # noqa: E501
            query_params.append(('access-type', local_var_params['access_type']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'required_features' in local_var_params and local_var_params['required_features'] is not None:  # noqa: E501
            query_params.append(('required-features', local_var_params['required_features']))  # noqa: E501
            collection_formats['required-features'] = 'csv'  # noqa: E501
        if 'complex_query' in local_var_params and local_var_params['complex_query'] is not None:  # noqa: E501
            query_params.append(('complex-query', local_var_params['complex_query']))  # noqa: E501
        if 'max_payload_size' in local_var_params and local_var_params['max_payload_size'] is not None:  # noqa: E501
            query_params.append(('max-payload-size', local_var_params['max_payload_size']))  # noqa: E501
        if 'atsss_capability' in local_var_params and local_var_params['atsss_capability'] is not None:  # noqa: E501
            query_params.append(('atsss-capability', local_var_params['atsss_capability']))  # noqa: E501
        if 'upf_ue_ip_addr_ind' in local_var_params and local_var_params['upf_ue_ip_addr_ind'] is not None:  # noqa: E501
            query_params.append(('upf-ue-ip-addr-ind', local_var_params['upf_ue_ip_addr_ind']))  # noqa: E501
        if 'client_type' in local_var_params and local_var_params['client_type'] is not None:  # noqa: E501
            query_params.append(('client-type', local_var_params['client_type']))  # noqa: E501
        if 'lmf_id' in local_var_params and local_var_params['lmf_id'] is not None:  # noqa: E501
            query_params.append(('lmf-id', local_var_params['lmf_id']))  # noqa: E501
        if 'an_node_type' in local_var_params and local_var_params['an_node_type'] is not None:  # noqa: E501
            query_params.append(('an-node-type', local_var_params['an_node_type']))  # noqa: E501
        if 'rat_type' in local_var_params and local_var_params['rat_type'] is not None:  # noqa: E501
            query_params.append(('rat-type', local_var_params['rat_type']))  # noqa: E501
        if 'preferred_tai' in local_var_params and local_var_params['preferred_tai'] is not None:  # noqa: E501
            query_params.append(('preferred-tai', local_var_params['preferred_tai']))  # noqa: E501
        if 'preferred_nf_instances' in local_var_params and local_var_params['preferred_nf_instances'] is not None:  # noqa: E501
            query_params.append(('preferred-nf-instances', local_var_params['preferred_nf_instances']))  # noqa: E501
            collection_formats['preferred-nf-instances'] = 'csv'  # noqa: E501
        if 'target_snpn' in local_var_params and local_var_params['target_snpn'] is not None:  # noqa: E501
            query_params.append(('target-snpn', local_var_params['target_snpn']))  # noqa: E501
        if 'af_ee_data' in local_var_params and local_var_params['af_ee_data'] is not None:  # noqa: E501
            query_params.append(('af-ee-data', local_var_params['af_ee_data']))  # noqa: E501
        if 'w_agf_info' in local_var_params and local_var_params['w_agf_info'] is not None:  # noqa: E501
            query_params.append(('w-agf-info', local_var_params['w_agf_info']))  # noqa: E501
        if 'tngf_info' in local_var_params and local_var_params['tngf_info'] is not None:  # noqa: E501
            query_params.append(('tngf-info', local_var_params['tngf_info']))  # noqa: E501
        if 'twif_info' in local_var_params and local_var_params['twif_info'] is not None:  # noqa: E501
            query_params.append(('twif-info', local_var_params['twif_info']))  # noqa: E501
        if 'target_nf_set_id' in local_var_params and local_var_params['target_nf_set_id'] is not None:  # noqa: E501
            query_params.append(('target-nf-set-id', local_var_params['target_nf_set_id']))  # noqa: E501
        if 'target_nf_service_set_id' in local_var_params and local_var_params['target_nf_service_set_id'] is not None:  # noqa: E501
            query_params.append(('target-nf-service-set-id', local_var_params['target_nf_service_set_id']))  # noqa: E501
        if 'nef_id' in local_var_params and local_var_params['nef_id'] is not None:  # noqa: E501
            query_params.append(('nef-id', local_var_params['nef_id']))  # noqa: E501
        if 'notification_type' in local_var_params and local_var_params['notification_type'] is not None:  # noqa: E501
            query_params.append(('notification-type', local_var_params['notification_type']))  # noqa: E501
        if 'serving_scope' in local_var_params and local_var_params['serving_scope'] is not None:  # noqa: E501
            query_params.append(('serving-scope', local_var_params['serving_scope']))  # noqa: E501
            collection_formats['serving-scope'] = 'csv'  # noqa: E501
        if 'imsi' in local_var_params and local_var_params['imsi'] is not None:  # noqa: E501
            query_params.append(('imsi', local_var_params['imsi']))  # noqa: E501
        if 'preferred_api_versions' in local_var_params and local_var_params['preferred_api_versions'] is not None:  # noqa: E501
            query_params.append(('preferred-api-versions', local_var_params['preferred_api_versions']))  # noqa: E501
        if 'v2x_support_ind' in local_var_params and local_var_params['v2x_support_ind'] is not None:  # noqa: E501
            query_params.append(('v2x-support-ind', local_var_params['v2x_support_ind']))  # noqa: E501
        if 'redundant_gtpu' in local_var_params and local_var_params['redundant_gtpu'] is not None:  # noqa: E501
            query_params.append(('redundant-gtpu', local_var_params['redundant_gtpu']))  # noqa: E501
        if 'redundant_transport' in local_var_params and local_var_params['redundant_transport'] is not None:  # noqa: E501
            query_params.append(('redundant-transport', local_var_params['redundant_transport']))  # noqa: E501

        header_params = {}
        if 'accept_encoding' in local_var_params:
            header_params['Accept-Encoding'] = local_var_params['accept_encoding']  # noqa: E501
        if 'if_none_match' in local_var_params:
            header_params['If-None-Match'] = local_var_params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/nf-instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
