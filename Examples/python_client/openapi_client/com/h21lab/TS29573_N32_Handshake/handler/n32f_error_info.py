# coding: utf-8

"""
    N32 Handshake API

    N32-c Handshake Service.  Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class N32fErrorInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'n32f_message_id': 'str',
        'n32f_error_type': 'N32fErrorType',
        'failed_modification_list': 'list[FailedModificationInfo]',
        'error_details_list': 'list[N32fErrorDetail]'
    }

    attribute_map = {
        'n32f_message_id': 'n32fMessageId',
        'n32f_error_type': 'n32fErrorType',
        'failed_modification_list': 'failedModificationList',
        'error_details_list': 'errorDetailsList'
    }

    def __init__(self, n32f_message_id=None, n32f_error_type=None, failed_modification_list=None, error_details_list=None, local_vars_configuration=None):  # noqa: E501
        """N32fErrorInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._n32f_message_id = None
        self._n32f_error_type = None
        self._failed_modification_list = None
        self._error_details_list = None
        self.discriminator = None

        self.n32f_message_id = n32f_message_id
        self.n32f_error_type = n32f_error_type
        if failed_modification_list is not None:
            self.failed_modification_list = failed_modification_list
        if error_details_list is not None:
            self.error_details_list = error_details_list

    @property
    def n32f_message_id(self):
        """Gets the n32f_message_id of this N32fErrorInfo.  # noqa: E501


        :return: The n32f_message_id of this N32fErrorInfo.  # noqa: E501
        :rtype: str
        """
        return self._n32f_message_id

    @n32f_message_id.setter
    def n32f_message_id(self, n32f_message_id):
        """Sets the n32f_message_id of this N32fErrorInfo.


        :param n32f_message_id: The n32f_message_id of this N32fErrorInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and n32f_message_id is None:  # noqa: E501
            raise ValueError("Invalid value for `n32f_message_id`, must not be `None`")  # noqa: E501

        self._n32f_message_id = n32f_message_id

    @property
    def n32f_error_type(self):
        """Gets the n32f_error_type of this N32fErrorInfo.  # noqa: E501


        :return: The n32f_error_type of this N32fErrorInfo.  # noqa: E501
        :rtype: N32fErrorType
        """
        return self._n32f_error_type

    @n32f_error_type.setter
    def n32f_error_type(self, n32f_error_type):
        """Sets the n32f_error_type of this N32fErrorInfo.


        :param n32f_error_type: The n32f_error_type of this N32fErrorInfo.  # noqa: E501
        :type: N32fErrorType
        """
        if self.local_vars_configuration.client_side_validation and n32f_error_type is None:  # noqa: E501
            raise ValueError("Invalid value for `n32f_error_type`, must not be `None`")  # noqa: E501

        self._n32f_error_type = n32f_error_type

    @property
    def failed_modification_list(self):
        """Gets the failed_modification_list of this N32fErrorInfo.  # noqa: E501


        :return: The failed_modification_list of this N32fErrorInfo.  # noqa: E501
        :rtype: list[FailedModificationInfo]
        """
        return self._failed_modification_list

    @failed_modification_list.setter
    def failed_modification_list(self, failed_modification_list):
        """Sets the failed_modification_list of this N32fErrorInfo.


        :param failed_modification_list: The failed_modification_list of this N32fErrorInfo.  # noqa: E501
        :type: list[FailedModificationInfo]
        """

        self._failed_modification_list = failed_modification_list

    @property
    def error_details_list(self):
        """Gets the error_details_list of this N32fErrorInfo.  # noqa: E501


        :return: The error_details_list of this N32fErrorInfo.  # noqa: E501
        :rtype: list[N32fErrorDetail]
        """
        return self._error_details_list

    @error_details_list.setter
    def error_details_list(self, error_details_list):
        """Sets the error_details_list of this N32fErrorInfo.


        :param error_details_list: The error_details_list of this N32fErrorInfo.  # noqa: E501
        :type: list[N32fErrorDetail]
        """

        self._error_details_list = error_details_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, N32fErrorInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, N32fErrorInfo):
            return True

        return self.to_dict() != other.to_dict()
