# coding: utf-8

"""
    N32 Handshake API

    N32-c Handshake Service.  Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SecParamExchReqData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'n32f_context_id': 'str',
        'jwe_cipher_suite_list': 'list[str]',
        'jws_cipher_suite_list': 'list[str]',
        'protection_policy_info': 'ProtectionPolicy',
        'ipx_provider_sec_info_list': 'list[IpxProviderSecInfo]',
        'sender': 'str'
    }

    attribute_map = {
        'n32f_context_id': 'n32fContextId',
        'jwe_cipher_suite_list': 'jweCipherSuiteList',
        'jws_cipher_suite_list': 'jwsCipherSuiteList',
        'protection_policy_info': 'protectionPolicyInfo',
        'ipx_provider_sec_info_list': 'ipxProviderSecInfoList',
        'sender': 'sender'
    }

    def __init__(self, n32f_context_id=None, jwe_cipher_suite_list=None, jws_cipher_suite_list=None, protection_policy_info=None, ipx_provider_sec_info_list=None, sender=None, local_vars_configuration=None):  # noqa: E501
        """SecParamExchReqData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._n32f_context_id = None
        self._jwe_cipher_suite_list = None
        self._jws_cipher_suite_list = None
        self._protection_policy_info = None
        self._ipx_provider_sec_info_list = None
        self._sender = None
        self.discriminator = None

        self.n32f_context_id = n32f_context_id
        if jwe_cipher_suite_list is not None:
            self.jwe_cipher_suite_list = jwe_cipher_suite_list
        if jws_cipher_suite_list is not None:
            self.jws_cipher_suite_list = jws_cipher_suite_list
        if protection_policy_info is not None:
            self.protection_policy_info = protection_policy_info
        if ipx_provider_sec_info_list is not None:
            self.ipx_provider_sec_info_list = ipx_provider_sec_info_list
        if sender is not None:
            self.sender = sender

    @property
    def n32f_context_id(self):
        """Gets the n32f_context_id of this SecParamExchReqData.  # noqa: E501


        :return: The n32f_context_id of this SecParamExchReqData.  # noqa: E501
        :rtype: str
        """
        return self._n32f_context_id

    @n32f_context_id.setter
    def n32f_context_id(self, n32f_context_id):
        """Sets the n32f_context_id of this SecParamExchReqData.


        :param n32f_context_id: The n32f_context_id of this SecParamExchReqData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and n32f_context_id is None:  # noqa: E501
            raise ValueError("Invalid value for `n32f_context_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                n32f_context_id is not None and not re.search(r'^[A-Fa-f0-9]{16}$', n32f_context_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `n32f_context_id`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{16}$/`")  # noqa: E501

        self._n32f_context_id = n32f_context_id

    @property
    def jwe_cipher_suite_list(self):
        """Gets the jwe_cipher_suite_list of this SecParamExchReqData.  # noqa: E501


        :return: The jwe_cipher_suite_list of this SecParamExchReqData.  # noqa: E501
        :rtype: list[str]
        """
        return self._jwe_cipher_suite_list

    @jwe_cipher_suite_list.setter
    def jwe_cipher_suite_list(self, jwe_cipher_suite_list):
        """Sets the jwe_cipher_suite_list of this SecParamExchReqData.


        :param jwe_cipher_suite_list: The jwe_cipher_suite_list of this SecParamExchReqData.  # noqa: E501
        :type: list[str]
        """

        self._jwe_cipher_suite_list = jwe_cipher_suite_list

    @property
    def jws_cipher_suite_list(self):
        """Gets the jws_cipher_suite_list of this SecParamExchReqData.  # noqa: E501


        :return: The jws_cipher_suite_list of this SecParamExchReqData.  # noqa: E501
        :rtype: list[str]
        """
        return self._jws_cipher_suite_list

    @jws_cipher_suite_list.setter
    def jws_cipher_suite_list(self, jws_cipher_suite_list):
        """Sets the jws_cipher_suite_list of this SecParamExchReqData.


        :param jws_cipher_suite_list: The jws_cipher_suite_list of this SecParamExchReqData.  # noqa: E501
        :type: list[str]
        """

        self._jws_cipher_suite_list = jws_cipher_suite_list

    @property
    def protection_policy_info(self):
        """Gets the protection_policy_info of this SecParamExchReqData.  # noqa: E501


        :return: The protection_policy_info of this SecParamExchReqData.  # noqa: E501
        :rtype: ProtectionPolicy
        """
        return self._protection_policy_info

    @protection_policy_info.setter
    def protection_policy_info(self, protection_policy_info):
        """Sets the protection_policy_info of this SecParamExchReqData.


        :param protection_policy_info: The protection_policy_info of this SecParamExchReqData.  # noqa: E501
        :type: ProtectionPolicy
        """

        self._protection_policy_info = protection_policy_info

    @property
    def ipx_provider_sec_info_list(self):
        """Gets the ipx_provider_sec_info_list of this SecParamExchReqData.  # noqa: E501


        :return: The ipx_provider_sec_info_list of this SecParamExchReqData.  # noqa: E501
        :rtype: list[IpxProviderSecInfo]
        """
        return self._ipx_provider_sec_info_list

    @ipx_provider_sec_info_list.setter
    def ipx_provider_sec_info_list(self, ipx_provider_sec_info_list):
        """Sets the ipx_provider_sec_info_list of this SecParamExchReqData.


        :param ipx_provider_sec_info_list: The ipx_provider_sec_info_list of this SecParamExchReqData.  # noqa: E501
        :type: list[IpxProviderSecInfo]
        """

        self._ipx_provider_sec_info_list = ipx_provider_sec_info_list

    @property
    def sender(self):
        """Gets the sender of this SecParamExchReqData.  # noqa: E501

        Fully Qualified Domain Name  # noqa: E501

        :return: The sender of this SecParamExchReqData.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this SecParamExchReqData.

        Fully Qualified Domain Name  # noqa: E501

        :param sender: The sender of this SecParamExchReqData.  # noqa: E501
        :type: str
        """

        self._sender = sender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecParamExchReqData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SecParamExchReqData):
            return True

        return self.to_dict() != other.to_dict()
