# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.amf_info import AmfInfo  # noqa: E501
from openapi_client.rest import ApiException

class TestAmfInfo(unittest.TestCase):
    """AmfInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AmfInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.amf_info.AmfInfo()  # noqa: E501
        if include_optional :
            return AmfInfo(
                amf_set_id = 'a', 
                amf_region_id = 'a', 
                guami_list = [
                    openapi_client.models.guami.Guami(
                        plmn_id = openapi_client.models.plmn_id.PlmnId(
                            mcc = 'a', 
                            mnc = 'a', ), 
                        amf_id = 'a', )
                    ], 
                tai_list = [
                    openapi_client.models.tai.Tai(
                        plmn_id = openapi_client.models.plmn_id.PlmnId(
                            mcc = 'a', 
                            mnc = 'a', ), 
                        tac = 'a', 
                        nid = 'a', )
                    ], 
                tai_range_list = [
                    openapi_client.models.tai_range.TaiRange(
                        plmn_id = openapi_client.models.plmn_id.PlmnId(
                            mcc = 'a', 
                            mnc = 'a', ), 
                        tac_range_list = [
                            openapi_client.models.tac_range.TacRange(
                                start = 'a', 
                                end = 'a', 
                                pattern = '0', )
                            ], 
                        nid = 'a', )
                    ], 
                backup_info_amf_failure = [
                    openapi_client.models.guami.Guami(
                        plmn_id = openapi_client.models.plmn_id.PlmnId(
                            mcc = 'a', 
                            mnc = 'a', ), 
                        amf_id = 'a', )
                    ], 
                backup_info_amf_removal = [
                    openapi_client.models.guami.Guami(
                        plmn_id = openapi_client.models.plmn_id.PlmnId(
                            mcc = 'a', 
                            mnc = 'a', ), 
                        amf_id = 'a', )
                    ], 
                n2_interface_amf_info = openapi_client.models.n2_interface_amf_info.N2InterfaceAmfInfo(
                    ipv4_endpoint_address = [
                        '198.51.100.1'
                        ], 
                    ipv6_endpoint_address = [
                        '2001:db8:85a3::8a2e:370:7334'
                        ], 
                    amf_name = '0', )
            )
        else :
            return AmfInfo(
                amf_set_id = 'a',
                amf_region_id = 'a',
                guami_list = [
                    openapi_client.models.guami.Guami(
                        plmn_id = openapi_client.models.plmn_id.PlmnId(
                            mcc = 'a', 
                            mnc = 'a', ), 
                        amf_id = 'a', )
                    ],
        )

    def testAmfInfo(self):
        """Test AmfInfo"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
