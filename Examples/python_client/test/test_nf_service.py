# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.nf_service import NFService  # noqa: E501
from openapi_client.rest import ApiException

class TestNFService(unittest.TestCase):
    """NFService unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test NFService
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.nf_service.NFService()  # noqa: E501
        if include_optional :
            return NFService(
                service_instance_id = '0', 
                service_name = null, 
                versions = [
                    openapi_client.models.nf_service_version.NFServiceVersion(
                        api_version_in_uri = '0', 
                        api_full_version = '0', 
                        expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ], 
                scheme = null, 
                nf_service_status = null, 
                fqdn = '0', 
                ip_end_points = [
                    openapi_client.models.ip_end_point.IpEndPoint(
                        ipv4_address = '198.51.100.1', 
                        ipv6_address = '2001:db8:85a3::8a2e:370:7334', 
                        transport = null, 
                        port = 0, )
                    ], 
                api_prefix = '0', 
                default_notification_subscriptions = [
                    openapi_client.models.default_notification_subscription.DefaultNotificationSubscription(
                        notification_type = null, 
                        callback_uri = '0', 
                        n1_message_class = null, 
                        n2_information_class = null, 
                        versions = [
                            '0'
                            ], )
                    ], 
                capacity = 0, 
                load = 0, 
                load_time_stamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                priority = 0, 
                recovery_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                chf_service_info = openapi_client.models.chf_service_info.ChfServiceInfo(
                    primary_chf_service_instance = '0', 
                    secondary_chf_service_instance = '0', ), 
                supported_features = 'a', 
                nf_service_set_id_list = [
                    '0'
                    ], 
                s_nssais = [
                    openapi_client.models.snssai.Snssai(
                        sst = 0, 
                        sd = 'a', )
                    ], 
                per_plmn_snssai_list = [
                    openapi_client.models.plmn_snssai.PlmnSnssai(
                        plmn_id = openapi_client.models.plmn_id.PlmnId(
                            mcc = 'a', 
                            mnc = 'a', ), 
                        s_nssai_list = [
                            openapi_client.models.snssai.Snssai(
                                sst = 0, 
                                sd = 'a', )
                            ], 
                        nid = 'a', )
                    ], 
                vendor_id = 'a', 
                supported_vendor_specific_features = {
                    'key' : [
                        openapi_client.models.vendor_specific_feature.VendorSpecificFeature(
                            feature_name = '0', 
                            feature_version = '0', )
                        ]
                    }, 
                oauth2_required = True
            )
        else :
            return NFService(
                service_instance_id = '0',
                service_name = null,
                versions = [
                    openapi_client.models.nf_service_version.NFServiceVersion(
                        api_version_in_uri = '0', 
                        api_full_version = '0', 
                        expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                scheme = null,
                nf_service_status = null,
        )

    def testNFService(self):
        """Test NFService"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
