# coding: utf-8

"""
    NRF NFDiscovery Service

    NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0.alpha-4
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.upf_info import UpfInfo  # noqa: E501
from openapi_client.rest import ApiException

class TestUpfInfo(unittest.TestCase):
    """UpfInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test UpfInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.upf_info.UpfInfo()  # noqa: E501
        if include_optional :
            return UpfInfo(
                s_nssai_upf_info_list = [
                    openapi_client.models.snssai_upf_info_item.SnssaiUpfInfoItem(
                        s_nssai = openapi_client.models.snssai.Snssai(
                            sst = 0, 
                            sd = 'a', ), 
                        dnn_upf_info_list = [
                            openapi_client.models.dnn_upf_info_item.DnnUpfInfoItem(
                                dnn = '0', 
                                dnai_list = [
                                    '0'
                                    ], 
                                pdu_session_types = [
                                    null
                                    ], 
                                ipv4_address_ranges = [
                                    openapi_client.models.ipv4_address_range.Ipv4AddressRange(
                                        start = '198.51.100.1', 
                                        end = '198.51.100.1', )
                                    ], 
                                ipv6_prefix_ranges = [
                                    openapi_client.models.ipv6_prefix_range.Ipv6PrefixRange()
                                    ], )
                            ], 
                        redundant_transport = True, )
                    ], 
                smf_serving_area = [
                    '0'
                    ], 
                interface_upf_info_list = [
                    openapi_client.models.interface_upf_info_item.InterfaceUpfInfoItem(
                        interface_type = null, 
                        ipv4_endpoint_addresses = [
                            '198.51.100.1'
                            ], 
                        ipv6_endpoint_addresses = [
                            '2001:db8:85a3::8a2e:370:7334'
                            ], 
                        endpoint_fqdn = '0', 
                        network_instance = '0', )
                    ], 
                iwk_eps_ind = True, 
                pdu_session_types = [
                    null
                    ], 
                atsss_capability = openapi_client.models.atsss_capability.AtsssCapability(
                    atsss_ll = True, 
                    mptcp = True, ), 
                ue_ip_addr_ind = True, 
                tai_list = [
                    openapi_client.models.tai.Tai(
                        plmn_id = openapi_client.models.plmn_id.PlmnId(
                            mcc = 'a', 
                            mnc = 'a', ), 
                        tac = 'a', 
                        nid = 'a', )
                    ], 
                w_agf_info = openapi_client.models.w_agf_info.WAgfInfo(
                    ipv4_endpoint_addresses = [
                        '198.51.100.1'
                        ], 
                    ipv6_endpoint_addresses = [
                        '2001:db8:85a3::8a2e:370:7334'
                        ], 
                    endpoint_fqdn = '0', ), 
                tngf_info = openapi_client.models.tngf_info.TngfInfo(
                    ipv4_endpoint_addresses = [
                        '198.51.100.1'
                        ], 
                    ipv6_endpoint_addresses = [
                        '2001:db8:85a3::8a2e:370:7334'
                        ], 
                    endpoint_fqdn = '0', ), 
                twif_info = openapi_client.models.twif_info.TwifInfo(
                    ipv4_endpoint_addresses = [
                        '198.51.100.1'
                        ], 
                    ipv6_endpoint_addresses = [
                        '2001:db8:85a3::8a2e:370:7334'
                        ], 
                    endpoint_fqdn = '0', ), 
                priority = 0, 
                redundant_gtpu = True
            )
        else :
            return UpfInfo(
                s_nssai_upf_info_list = [
                    openapi_client.models.snssai_upf_info_item.SnssaiUpfInfoItem(
                        s_nssai = openapi_client.models.snssai.Snssai(
                            sst = 0, 
                            sd = 'a', ), 
                        dnn_upf_info_list = [
                            openapi_client.models.dnn_upf_info_item.DnnUpfInfoItem(
                                dnn = '0', 
                                dnai_list = [
                                    '0'
                                    ], 
                                pdu_session_types = [
                                    null
                                    ], 
                                ipv4_address_ranges = [
                                    openapi_client.models.ipv4_address_range.Ipv4AddressRange(
                                        start = '198.51.100.1', 
                                        end = '198.51.100.1', )
                                    ], 
                                ipv6_prefix_ranges = [
                                    openapi_client.models.ipv6_prefix_range.Ipv6PrefixRange()
                                    ], )
                            ], 
                        redundant_transport = True, )
                    ],
        )

    def testUpfInfo(self):
        """Test UpfInfo"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
