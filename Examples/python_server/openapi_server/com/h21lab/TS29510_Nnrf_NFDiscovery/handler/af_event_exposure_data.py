# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.af_event import AfEvent
from openapi_server import util

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.af_event import AfEvent  # noqa: E501

class AfEventExposureData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, af_events=None, af_ids=None, app_ids=None):  # noqa: E501
        """AfEventExposureData - a model defined in OpenAPI

        :param af_events: The af_events of this AfEventExposureData.  # noqa: E501
        :type af_events: List[AfEvent]
        :param af_ids: The af_ids of this AfEventExposureData.  # noqa: E501
        :type af_ids: List[str]
        :param app_ids: The app_ids of this AfEventExposureData.  # noqa: E501
        :type app_ids: List[str]
        """
        self.openapi_types = {
            'af_events': List[AfEvent],
            'af_ids': List[str],
            'app_ids': List[str]
        }

        self.attribute_map = {
            'af_events': 'afEvents',
            'af_ids': 'afIds',
            'app_ids': 'appIds'
        }

        self._af_events = af_events
        self._af_ids = af_ids
        self._app_ids = app_ids

    @classmethod
    def from_dict(cls, dikt) -> 'AfEventExposureData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AfEventExposureData of this AfEventExposureData.  # noqa: E501
        :rtype: AfEventExposureData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def af_events(self):
        """Gets the af_events of this AfEventExposureData.


        :return: The af_events of this AfEventExposureData.
        :rtype: List[AfEvent]
        """
        return self._af_events

    @af_events.setter
    def af_events(self, af_events):
        """Sets the af_events of this AfEventExposureData.


        :param af_events: The af_events of this AfEventExposureData.
        :type af_events: List[AfEvent]
        """
        if af_events is None:
            raise ValueError("Invalid value for `af_events`, must not be `None`")  # noqa: E501

        self._af_events = af_events

    @property
    def af_ids(self):
        """Gets the af_ids of this AfEventExposureData.


        :return: The af_ids of this AfEventExposureData.
        :rtype: List[str]
        """
        return self._af_ids

    @af_ids.setter
    def af_ids(self, af_ids):
        """Sets the af_ids of this AfEventExposureData.


        :param af_ids: The af_ids of this AfEventExposureData.
        :type af_ids: List[str]
        """

        self._af_ids = af_ids

    @property
    def app_ids(self):
        """Gets the app_ids of this AfEventExposureData.


        :return: The app_ids of this AfEventExposureData.
        :rtype: List[str]
        """
        return self._app_ids

    @app_ids.setter
    def app_ids(self, app_ids):
        """Sets the app_ids of this AfEventExposureData.


        :param app_ids: The app_ids of this AfEventExposureData.
        :type app_ids: List[str]
        """

        self._app_ids = app_ids
