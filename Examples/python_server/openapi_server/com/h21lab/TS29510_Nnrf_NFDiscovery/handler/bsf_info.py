# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.ipv4_address_range import Ipv4AddressRange
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.ipv6_prefix_range import Ipv6PrefixRange
from openapi_server import util

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.ipv4_address_range import Ipv4AddressRange  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.ipv6_prefix_range import Ipv6PrefixRange  # noqa: E501

class BsfInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dnn_list=None, ip_domain_list=None, ipv4_address_ranges=None, ipv6_prefix_ranges=None):  # noqa: E501
        """BsfInfo - a model defined in OpenAPI

        :param dnn_list: The dnn_list of this BsfInfo.  # noqa: E501
        :type dnn_list: List[str]
        :param ip_domain_list: The ip_domain_list of this BsfInfo.  # noqa: E501
        :type ip_domain_list: List[str]
        :param ipv4_address_ranges: The ipv4_address_ranges of this BsfInfo.  # noqa: E501
        :type ipv4_address_ranges: List[Ipv4AddressRange]
        :param ipv6_prefix_ranges: The ipv6_prefix_ranges of this BsfInfo.  # noqa: E501
        :type ipv6_prefix_ranges: List[Ipv6PrefixRange]
        """
        self.openapi_types = {
            'dnn_list': List[str],
            'ip_domain_list': List[str],
            'ipv4_address_ranges': List[Ipv4AddressRange],
            'ipv6_prefix_ranges': List[Ipv6PrefixRange]
        }

        self.attribute_map = {
            'dnn_list': 'dnnList',
            'ip_domain_list': 'ipDomainList',
            'ipv4_address_ranges': 'ipv4AddressRanges',
            'ipv6_prefix_ranges': 'ipv6PrefixRanges'
        }

        self._dnn_list = dnn_list
        self._ip_domain_list = ip_domain_list
        self._ipv4_address_ranges = ipv4_address_ranges
        self._ipv6_prefix_ranges = ipv6_prefix_ranges

    @classmethod
    def from_dict(cls, dikt) -> 'BsfInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BsfInfo of this BsfInfo.  # noqa: E501
        :rtype: BsfInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dnn_list(self):
        """Gets the dnn_list of this BsfInfo.


        :return: The dnn_list of this BsfInfo.
        :rtype: List[str]
        """
        return self._dnn_list

    @dnn_list.setter
    def dnn_list(self, dnn_list):
        """Sets the dnn_list of this BsfInfo.


        :param dnn_list: The dnn_list of this BsfInfo.
        :type dnn_list: List[str]
        """

        self._dnn_list = dnn_list

    @property
    def ip_domain_list(self):
        """Gets the ip_domain_list of this BsfInfo.


        :return: The ip_domain_list of this BsfInfo.
        :rtype: List[str]
        """
        return self._ip_domain_list

    @ip_domain_list.setter
    def ip_domain_list(self, ip_domain_list):
        """Sets the ip_domain_list of this BsfInfo.


        :param ip_domain_list: The ip_domain_list of this BsfInfo.
        :type ip_domain_list: List[str]
        """

        self._ip_domain_list = ip_domain_list

    @property
    def ipv4_address_ranges(self):
        """Gets the ipv4_address_ranges of this BsfInfo.


        :return: The ipv4_address_ranges of this BsfInfo.
        :rtype: List[Ipv4AddressRange]
        """
        return self._ipv4_address_ranges

    @ipv4_address_ranges.setter
    def ipv4_address_ranges(self, ipv4_address_ranges):
        """Sets the ipv4_address_ranges of this BsfInfo.


        :param ipv4_address_ranges: The ipv4_address_ranges of this BsfInfo.
        :type ipv4_address_ranges: List[Ipv4AddressRange]
        """

        self._ipv4_address_ranges = ipv4_address_ranges

    @property
    def ipv6_prefix_ranges(self):
        """Gets the ipv6_prefix_ranges of this BsfInfo.


        :return: The ipv6_prefix_ranges of this BsfInfo.
        :rtype: List[Ipv6PrefixRange]
        """
        return self._ipv6_prefix_ranges

    @ipv6_prefix_ranges.setter
    def ipv6_prefix_ranges(self, ipv6_prefix_ranges):
        """Sets the ipv6_prefix_ranges of this BsfInfo.


        :param ipv6_prefix_ranges: The ipv6_prefix_ranges of this BsfInfo.
        :type ipv6_prefix_ranges: List[Ipv6PrefixRange]
        """

        self._ipv6_prefix_ranges = ipv6_prefix_ranges
