# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.ipv4_address_range import Ipv4AddressRange
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.ipv6_prefix_range import Ipv6PrefixRange
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.pdu_session_type import PduSessionType
from openapi_server import util

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.ipv4_address_range import Ipv4AddressRange  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.ipv6_prefix_range import Ipv6PrefixRange  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.pdu_session_type import PduSessionType  # noqa: E501

class DnnUpfInfoItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dnn=None, dnai_list=None, pdu_session_types=None, ipv4_address_ranges=None, ipv6_prefix_ranges=None):  # noqa: E501
        """DnnUpfInfoItem - a model defined in OpenAPI

        :param dnn: The dnn of this DnnUpfInfoItem.  # noqa: E501
        :type dnn: str
        :param dnai_list: The dnai_list of this DnnUpfInfoItem.  # noqa: E501
        :type dnai_list: List[str]
        :param pdu_session_types: The pdu_session_types of this DnnUpfInfoItem.  # noqa: E501
        :type pdu_session_types: List[PduSessionType]
        :param ipv4_address_ranges: The ipv4_address_ranges of this DnnUpfInfoItem.  # noqa: E501
        :type ipv4_address_ranges: List[Ipv4AddressRange]
        :param ipv6_prefix_ranges: The ipv6_prefix_ranges of this DnnUpfInfoItem.  # noqa: E501
        :type ipv6_prefix_ranges: List[Ipv6PrefixRange]
        """
        self.openapi_types = {
            'dnn': str,
            'dnai_list': List[str],
            'pdu_session_types': List[PduSessionType],
            'ipv4_address_ranges': List[Ipv4AddressRange],
            'ipv6_prefix_ranges': List[Ipv6PrefixRange]
        }

        self.attribute_map = {
            'dnn': 'dnn',
            'dnai_list': 'dnaiList',
            'pdu_session_types': 'pduSessionTypes',
            'ipv4_address_ranges': 'ipv4AddressRanges',
            'ipv6_prefix_ranges': 'ipv6PrefixRanges'
        }

        self._dnn = dnn
        self._dnai_list = dnai_list
        self._pdu_session_types = pdu_session_types
        self._ipv4_address_ranges = ipv4_address_ranges
        self._ipv6_prefix_ranges = ipv6_prefix_ranges

    @classmethod
    def from_dict(cls, dikt) -> 'DnnUpfInfoItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DnnUpfInfoItem of this DnnUpfInfoItem.  # noqa: E501
        :rtype: DnnUpfInfoItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dnn(self):
        """Gets the dnn of this DnnUpfInfoItem.


        :return: The dnn of this DnnUpfInfoItem.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this DnnUpfInfoItem.


        :param dnn: The dnn of this DnnUpfInfoItem.
        :type dnn: str
        """
        if dnn is None:
            raise ValueError("Invalid value for `dnn`, must not be `None`")  # noqa: E501

        self._dnn = dnn

    @property
    def dnai_list(self):
        """Gets the dnai_list of this DnnUpfInfoItem.


        :return: The dnai_list of this DnnUpfInfoItem.
        :rtype: List[str]
        """
        return self._dnai_list

    @dnai_list.setter
    def dnai_list(self, dnai_list):
        """Sets the dnai_list of this DnnUpfInfoItem.


        :param dnai_list: The dnai_list of this DnnUpfInfoItem.
        :type dnai_list: List[str]
        """

        self._dnai_list = dnai_list

    @property
    def pdu_session_types(self):
        """Gets the pdu_session_types of this DnnUpfInfoItem.


        :return: The pdu_session_types of this DnnUpfInfoItem.
        :rtype: List[PduSessionType]
        """
        return self._pdu_session_types

    @pdu_session_types.setter
    def pdu_session_types(self, pdu_session_types):
        """Sets the pdu_session_types of this DnnUpfInfoItem.


        :param pdu_session_types: The pdu_session_types of this DnnUpfInfoItem.
        :type pdu_session_types: List[PduSessionType]
        """

        self._pdu_session_types = pdu_session_types

    @property
    def ipv4_address_ranges(self):
        """Gets the ipv4_address_ranges of this DnnUpfInfoItem.


        :return: The ipv4_address_ranges of this DnnUpfInfoItem.
        :rtype: List[Ipv4AddressRange]
        """
        return self._ipv4_address_ranges

    @ipv4_address_ranges.setter
    def ipv4_address_ranges(self, ipv4_address_ranges):
        """Sets the ipv4_address_ranges of this DnnUpfInfoItem.


        :param ipv4_address_ranges: The ipv4_address_ranges of this DnnUpfInfoItem.
        :type ipv4_address_ranges: List[Ipv4AddressRange]
        """

        self._ipv4_address_ranges = ipv4_address_ranges

    @property
    def ipv6_prefix_ranges(self):
        """Gets the ipv6_prefix_ranges of this DnnUpfInfoItem.


        :return: The ipv6_prefix_ranges of this DnnUpfInfoItem.
        :rtype: List[Ipv6PrefixRange]
        """
        return self._ipv6_prefix_ranges

    @ipv6_prefix_ranges.setter
    def ipv6_prefix_ranges(self, ipv6_prefix_ranges):
        """Sets the ipv6_prefix_ranges of this DnnUpfInfoItem.


        :param ipv6_prefix_ranges: The ipv6_prefix_ranges of this DnnUpfInfoItem.
        :type ipv6_prefix_ranges: List[Ipv6PrefixRange]
        """

        self._ipv6_prefix_ranges = ipv6_prefix_ranges
