# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.plmn_id import PlmnId
import re
from openapi_server import util

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.plmn_id import PlmnId  # noqa: E501
import re  # noqa: E501

class Guami(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plmn_id=None, amf_id=None):  # noqa: E501
        """Guami - a model defined in OpenAPI

        :param plmn_id: The plmn_id of this Guami.  # noqa: E501
        :type plmn_id: PlmnId
        :param amf_id: The amf_id of this Guami.  # noqa: E501
        :type amf_id: str
        """
        self.openapi_types = {
            'plmn_id': PlmnId,
            'amf_id': str
        }

        self.attribute_map = {
            'plmn_id': 'plmnId',
            'amf_id': 'amfId'
        }

        self._plmn_id = plmn_id
        self._amf_id = amf_id

    @classmethod
    def from_dict(cls, dikt) -> 'Guami':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Guami of this Guami.  # noqa: E501
        :rtype: Guami
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plmn_id(self):
        """Gets the plmn_id of this Guami.


        :return: The plmn_id of this Guami.
        :rtype: PlmnId
        """
        return self._plmn_id

    @plmn_id.setter
    def plmn_id(self, plmn_id):
        """Sets the plmn_id of this Guami.


        :param plmn_id: The plmn_id of this Guami.
        :type plmn_id: PlmnId
        """
        if plmn_id is None:
            raise ValueError("Invalid value for `plmn_id`, must not be `None`")  # noqa: E501

        self._plmn_id = plmn_id

    @property
    def amf_id(self):
        """Gets the amf_id of this Guami.


        :return: The amf_id of this Guami.
        :rtype: str
        """
        return self._amf_id

    @amf_id.setter
    def amf_id(self, amf_id):
        """Sets the amf_id of this Guami.


        :param amf_id: The amf_id of this Guami.
        :type amf_id: str
        """
        if amf_id is None:
            raise ValueError("Invalid value for `amf_id`, must not be `None`")  # noqa: E501
        if amf_id is not None and not re.search(r'^[A-Fa-f0-9]{6}$', amf_id):  # noqa: E501
            raise ValueError("Invalid value for `amf_id`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{6}$/`")  # noqa: E501

        self._amf_id = amf_id
