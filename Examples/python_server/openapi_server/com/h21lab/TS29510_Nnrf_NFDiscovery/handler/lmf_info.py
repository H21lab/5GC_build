# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.access_type import AccessType
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.an_node_type import AnNodeType
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.external_client_type import ExternalClientType
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.rat_type import RatType
from openapi_server import util

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.access_type import AccessType  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.an_node_type import AnNodeType  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.external_client_type import ExternalClientType  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.rat_type import RatType  # noqa: E501

class LmfInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, serving_client_types=None, lmf_id=None, serving_access_types=None, serving_an_node_types=None, serving_rat_types=None):  # noqa: E501
        """LmfInfo - a model defined in OpenAPI

        :param serving_client_types: The serving_client_types of this LmfInfo.  # noqa: E501
        :type serving_client_types: List[ExternalClientType]
        :param lmf_id: The lmf_id of this LmfInfo.  # noqa: E501
        :type lmf_id: str
        :param serving_access_types: The serving_access_types of this LmfInfo.  # noqa: E501
        :type serving_access_types: List[AccessType]
        :param serving_an_node_types: The serving_an_node_types of this LmfInfo.  # noqa: E501
        :type serving_an_node_types: List[AnNodeType]
        :param serving_rat_types: The serving_rat_types of this LmfInfo.  # noqa: E501
        :type serving_rat_types: List[RatType]
        """
        self.openapi_types = {
            'serving_client_types': List[ExternalClientType],
            'lmf_id': str,
            'serving_access_types': List[AccessType],
            'serving_an_node_types': List[AnNodeType],
            'serving_rat_types': List[RatType]
        }

        self.attribute_map = {
            'serving_client_types': 'servingClientTypes',
            'lmf_id': 'lmfId',
            'serving_access_types': 'servingAccessTypes',
            'serving_an_node_types': 'servingAnNodeTypes',
            'serving_rat_types': 'servingRatTypes'
        }

        self._serving_client_types = serving_client_types
        self._lmf_id = lmf_id
        self._serving_access_types = serving_access_types
        self._serving_an_node_types = serving_an_node_types
        self._serving_rat_types = serving_rat_types

    @classmethod
    def from_dict(cls, dikt) -> 'LmfInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LmfInfo of this LmfInfo.  # noqa: E501
        :rtype: LmfInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def serving_client_types(self):
        """Gets the serving_client_types of this LmfInfo.


        :return: The serving_client_types of this LmfInfo.
        :rtype: List[ExternalClientType]
        """
        return self._serving_client_types

    @serving_client_types.setter
    def serving_client_types(self, serving_client_types):
        """Sets the serving_client_types of this LmfInfo.


        :param serving_client_types: The serving_client_types of this LmfInfo.
        :type serving_client_types: List[ExternalClientType]
        """

        self._serving_client_types = serving_client_types

    @property
    def lmf_id(self):
        """Gets the lmf_id of this LmfInfo.


        :return: The lmf_id of this LmfInfo.
        :rtype: str
        """
        return self._lmf_id

    @lmf_id.setter
    def lmf_id(self, lmf_id):
        """Sets the lmf_id of this LmfInfo.


        :param lmf_id: The lmf_id of this LmfInfo.
        :type lmf_id: str
        """

        self._lmf_id = lmf_id

    @property
    def serving_access_types(self):
        """Gets the serving_access_types of this LmfInfo.


        :return: The serving_access_types of this LmfInfo.
        :rtype: List[AccessType]
        """
        return self._serving_access_types

    @serving_access_types.setter
    def serving_access_types(self, serving_access_types):
        """Sets the serving_access_types of this LmfInfo.


        :param serving_access_types: The serving_access_types of this LmfInfo.
        :type serving_access_types: List[AccessType]
        """

        self._serving_access_types = serving_access_types

    @property
    def serving_an_node_types(self):
        """Gets the serving_an_node_types of this LmfInfo.


        :return: The serving_an_node_types of this LmfInfo.
        :rtype: List[AnNodeType]
        """
        return self._serving_an_node_types

    @serving_an_node_types.setter
    def serving_an_node_types(self, serving_an_node_types):
        """Sets the serving_an_node_types of this LmfInfo.


        :param serving_an_node_types: The serving_an_node_types of this LmfInfo.
        :type serving_an_node_types: List[AnNodeType]
        """

        self._serving_an_node_types = serving_an_node_types

    @property
    def serving_rat_types(self):
        """Gets the serving_rat_types of this LmfInfo.


        :return: The serving_rat_types of this LmfInfo.
        :rtype: List[RatType]
        """
        return self._serving_rat_types

    @serving_rat_types.setter
    def serving_rat_types(self, serving_rat_types):
        """Sets the serving_rat_types of this LmfInfo.


        :param serving_rat_types: The serving_rat_types of this LmfInfo.
        :type serving_rat_types: List[RatType]
        """

        self._serving_rat_types = serving_rat_types
