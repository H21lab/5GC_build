# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server import util


class NFServiceVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version_in_uri=None, api_full_version=None, expiry=None):  # noqa: E501
        """NFServiceVersion - a model defined in OpenAPI

        :param api_version_in_uri: The api_version_in_uri of this NFServiceVersion.  # noqa: E501
        :type api_version_in_uri: str
        :param api_full_version: The api_full_version of this NFServiceVersion.  # noqa: E501
        :type api_full_version: str
        :param expiry: The expiry of this NFServiceVersion.  # noqa: E501
        :type expiry: datetime
        """
        self.openapi_types = {
            'api_version_in_uri': str,
            'api_full_version': str,
            'expiry': datetime
        }

        self.attribute_map = {
            'api_version_in_uri': 'apiVersionInUri',
            'api_full_version': 'apiFullVersion',
            'expiry': 'expiry'
        }

        self._api_version_in_uri = api_version_in_uri
        self._api_full_version = api_full_version
        self._expiry = expiry

    @classmethod
    def from_dict(cls, dikt) -> 'NFServiceVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NFServiceVersion of this NFServiceVersion.  # noqa: E501
        :rtype: NFServiceVersion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version_in_uri(self):
        """Gets the api_version_in_uri of this NFServiceVersion.


        :return: The api_version_in_uri of this NFServiceVersion.
        :rtype: str
        """
        return self._api_version_in_uri

    @api_version_in_uri.setter
    def api_version_in_uri(self, api_version_in_uri):
        """Sets the api_version_in_uri of this NFServiceVersion.


        :param api_version_in_uri: The api_version_in_uri of this NFServiceVersion.
        :type api_version_in_uri: str
        """
        if api_version_in_uri is None:
            raise ValueError("Invalid value for `api_version_in_uri`, must not be `None`")  # noqa: E501

        self._api_version_in_uri = api_version_in_uri

    @property
    def api_full_version(self):
        """Gets the api_full_version of this NFServiceVersion.


        :return: The api_full_version of this NFServiceVersion.
        :rtype: str
        """
        return self._api_full_version

    @api_full_version.setter
    def api_full_version(self, api_full_version):
        """Sets the api_full_version of this NFServiceVersion.


        :param api_full_version: The api_full_version of this NFServiceVersion.
        :type api_full_version: str
        """
        if api_full_version is None:
            raise ValueError("Invalid value for `api_full_version`, must not be `None`")  # noqa: E501

        self._api_full_version = api_full_version

    @property
    def expiry(self):
        """Gets the expiry of this NFServiceVersion.


        :return: The expiry of this NFServiceVersion.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this NFServiceVersion.


        :param expiry: The expiry of this NFServiceVersion.
        :type expiry: datetime
        """

        self._expiry = expiry
