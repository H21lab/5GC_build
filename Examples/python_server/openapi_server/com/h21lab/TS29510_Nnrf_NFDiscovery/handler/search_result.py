# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.nf_profile import NFProfile
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.preferred_search import PreferredSearch
import re
from openapi_server import util

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.nf_profile import NFProfile  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.preferred_search import PreferredSearch  # noqa: E501
import re  # noqa: E501

class SearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, validity_period=None, nf_instances=None, search_id=None, num_nf_inst_complete=None, preferred_search=None, nrf_supported_features=None):  # noqa: E501
        """SearchResult - a model defined in OpenAPI

        :param validity_period: The validity_period of this SearchResult.  # noqa: E501
        :type validity_period: int
        :param nf_instances: The nf_instances of this SearchResult.  # noqa: E501
        :type nf_instances: List[NFProfile]
        :param search_id: The search_id of this SearchResult.  # noqa: E501
        :type search_id: str
        :param num_nf_inst_complete: The num_nf_inst_complete of this SearchResult.  # noqa: E501
        :type num_nf_inst_complete: int
        :param preferred_search: The preferred_search of this SearchResult.  # noqa: E501
        :type preferred_search: PreferredSearch
        :param nrf_supported_features: The nrf_supported_features of this SearchResult.  # noqa: E501
        :type nrf_supported_features: str
        """
        self.openapi_types = {
            'validity_period': int,
            'nf_instances': List[NFProfile],
            'search_id': str,
            'num_nf_inst_complete': int,
            'preferred_search': PreferredSearch,
            'nrf_supported_features': str
        }

        self.attribute_map = {
            'validity_period': 'validityPeriod',
            'nf_instances': 'nfInstances',
            'search_id': 'searchId',
            'num_nf_inst_complete': 'numNfInstComplete',
            'preferred_search': 'preferredSearch',
            'nrf_supported_features': 'nrfSupportedFeatures'
        }

        self._validity_period = validity_period
        self._nf_instances = nf_instances
        self._search_id = search_id
        self._num_nf_inst_complete = num_nf_inst_complete
        self._preferred_search = preferred_search
        self._nrf_supported_features = nrf_supported_features

    @classmethod
    def from_dict(cls, dikt) -> 'SearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SearchResult of this SearchResult.  # noqa: E501
        :rtype: SearchResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def validity_period(self):
        """Gets the validity_period of this SearchResult.


        :return: The validity_period of this SearchResult.
        :rtype: int
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this SearchResult.


        :param validity_period: The validity_period of this SearchResult.
        :type validity_period: int
        """

        self._validity_period = validity_period

    @property
    def nf_instances(self):
        """Gets the nf_instances of this SearchResult.


        :return: The nf_instances of this SearchResult.
        :rtype: List[NFProfile]
        """
        return self._nf_instances

    @nf_instances.setter
    def nf_instances(self, nf_instances):
        """Sets the nf_instances of this SearchResult.


        :param nf_instances: The nf_instances of this SearchResult.
        :type nf_instances: List[NFProfile]
        """
        if nf_instances is None:
            raise ValueError("Invalid value for `nf_instances`, must not be `None`")  # noqa: E501

        self._nf_instances = nf_instances

    @property
    def search_id(self):
        """Gets the search_id of this SearchResult.


        :return: The search_id of this SearchResult.
        :rtype: str
        """
        return self._search_id

    @search_id.setter
    def search_id(self, search_id):
        """Sets the search_id of this SearchResult.


        :param search_id: The search_id of this SearchResult.
        :type search_id: str
        """

        self._search_id = search_id

    @property
    def num_nf_inst_complete(self):
        """Gets the num_nf_inst_complete of this SearchResult.


        :return: The num_nf_inst_complete of this SearchResult.
        :rtype: int
        """
        return self._num_nf_inst_complete

    @num_nf_inst_complete.setter
    def num_nf_inst_complete(self, num_nf_inst_complete):
        """Sets the num_nf_inst_complete of this SearchResult.


        :param num_nf_inst_complete: The num_nf_inst_complete of this SearchResult.
        :type num_nf_inst_complete: int
        """
        if num_nf_inst_complete is not None and num_nf_inst_complete < 0:  # noqa: E501
            raise ValueError("Invalid value for `num_nf_inst_complete`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_nf_inst_complete = num_nf_inst_complete

    @property
    def preferred_search(self):
        """Gets the preferred_search of this SearchResult.


        :return: The preferred_search of this SearchResult.
        :rtype: PreferredSearch
        """
        return self._preferred_search

    @preferred_search.setter
    def preferred_search(self, preferred_search):
        """Sets the preferred_search of this SearchResult.


        :param preferred_search: The preferred_search of this SearchResult.
        :type preferred_search: PreferredSearch
        """

        self._preferred_search = preferred_search

    @property
    def nrf_supported_features(self):
        """Gets the nrf_supported_features of this SearchResult.


        :return: The nrf_supported_features of this SearchResult.
        :rtype: str
        """
        return self._nrf_supported_features

    @nrf_supported_features.setter
    def nrf_supported_features(self, nrf_supported_features):
        """Sets the nrf_supported_features of this SearchResult.


        :param nrf_supported_features: The nrf_supported_features of this SearchResult.
        :type nrf_supported_features: str
        """
        if nrf_supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', nrf_supported_features):  # noqa: E501
            raise ValueError("Invalid value for `nrf_supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._nrf_supported_features = nrf_supported_features
