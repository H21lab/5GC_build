# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.access_type import AccessType
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.snssai_smf_info_item import SnssaiSmfInfoItem
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.tai import Tai
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.tai_range import TaiRange
from openapi_server import util

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.access_type import AccessType  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.snssai_smf_info_item import SnssaiSmfInfoItem  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.tai import Tai  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.tai_range import TaiRange  # noqa: E501

class SmfInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s_nssai_smf_info_list=None, tai_list=None, tai_range_list=None, pgw_fqdn=None, access_type=None, priority=None):  # noqa: E501
        """SmfInfo - a model defined in OpenAPI

        :param s_nssai_smf_info_list: The s_nssai_smf_info_list of this SmfInfo.  # noqa: E501
        :type s_nssai_smf_info_list: List[SnssaiSmfInfoItem]
        :param tai_list: The tai_list of this SmfInfo.  # noqa: E501
        :type tai_list: List[Tai]
        :param tai_range_list: The tai_range_list of this SmfInfo.  # noqa: E501
        :type tai_range_list: List[TaiRange]
        :param pgw_fqdn: The pgw_fqdn of this SmfInfo.  # noqa: E501
        :type pgw_fqdn: str
        :param access_type: The access_type of this SmfInfo.  # noqa: E501
        :type access_type: List[AccessType]
        :param priority: The priority of this SmfInfo.  # noqa: E501
        :type priority: int
        """
        self.openapi_types = {
            's_nssai_smf_info_list': List[SnssaiSmfInfoItem],
            'tai_list': List[Tai],
            'tai_range_list': List[TaiRange],
            'pgw_fqdn': str,
            'access_type': List[AccessType],
            'priority': int
        }

        self.attribute_map = {
            's_nssai_smf_info_list': 'sNssaiSmfInfoList',
            'tai_list': 'taiList',
            'tai_range_list': 'taiRangeList',
            'pgw_fqdn': 'pgwFqdn',
            'access_type': 'accessType',
            'priority': 'priority'
        }

        self._s_nssai_smf_info_list = s_nssai_smf_info_list
        self._tai_list = tai_list
        self._tai_range_list = tai_range_list
        self._pgw_fqdn = pgw_fqdn
        self._access_type = access_type
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt) -> 'SmfInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmfInfo of this SmfInfo.  # noqa: E501
        :rtype: SmfInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s_nssai_smf_info_list(self):
        """Gets the s_nssai_smf_info_list of this SmfInfo.


        :return: The s_nssai_smf_info_list of this SmfInfo.
        :rtype: List[SnssaiSmfInfoItem]
        """
        return self._s_nssai_smf_info_list

    @s_nssai_smf_info_list.setter
    def s_nssai_smf_info_list(self, s_nssai_smf_info_list):
        """Sets the s_nssai_smf_info_list of this SmfInfo.


        :param s_nssai_smf_info_list: The s_nssai_smf_info_list of this SmfInfo.
        :type s_nssai_smf_info_list: List[SnssaiSmfInfoItem]
        """
        if s_nssai_smf_info_list is None:
            raise ValueError("Invalid value for `s_nssai_smf_info_list`, must not be `None`")  # noqa: E501

        self._s_nssai_smf_info_list = s_nssai_smf_info_list

    @property
    def tai_list(self):
        """Gets the tai_list of this SmfInfo.


        :return: The tai_list of this SmfInfo.
        :rtype: List[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this SmfInfo.


        :param tai_list: The tai_list of this SmfInfo.
        :type tai_list: List[Tai]
        """

        self._tai_list = tai_list

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this SmfInfo.


        :return: The tai_range_list of this SmfInfo.
        :rtype: List[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this SmfInfo.


        :param tai_range_list: The tai_range_list of this SmfInfo.
        :type tai_range_list: List[TaiRange]
        """

        self._tai_range_list = tai_range_list

    @property
    def pgw_fqdn(self):
        """Gets the pgw_fqdn of this SmfInfo.

        Fully Qualified Domain Name  # noqa: E501

        :return: The pgw_fqdn of this SmfInfo.
        :rtype: str
        """
        return self._pgw_fqdn

    @pgw_fqdn.setter
    def pgw_fqdn(self, pgw_fqdn):
        """Sets the pgw_fqdn of this SmfInfo.

        Fully Qualified Domain Name  # noqa: E501

        :param pgw_fqdn: The pgw_fqdn of this SmfInfo.
        :type pgw_fqdn: str
        """

        self._pgw_fqdn = pgw_fqdn

    @property
    def access_type(self):
        """Gets the access_type of this SmfInfo.


        :return: The access_type of this SmfInfo.
        :rtype: List[AccessType]
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this SmfInfo.


        :param access_type: The access_type of this SmfInfo.
        :type access_type: List[AccessType]
        """

        self._access_type = access_type

    @property
    def priority(self):
        """Gets the priority of this SmfInfo.


        :return: The priority of this SmfInfo.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SmfInfo.


        :param priority: The priority of this SmfInfo.
        :type priority: int
        """
        if priority is not None and priority > 65535:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if priority is not None and priority < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority
