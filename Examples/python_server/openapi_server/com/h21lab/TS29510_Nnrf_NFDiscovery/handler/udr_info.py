# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.data_set_id import DataSetId
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.identity_range import IdentityRange
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.supi_range import SupiRange
from openapi_server import util

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.data_set_id import DataSetId  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.identity_range import IdentityRange  # noqa: E501
from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.supi_range import SupiRange  # noqa: E501

class UdrInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id=None, supi_ranges=None, gpsi_ranges=None, external_group_identifiers_ranges=None, supported_data_sets=None):  # noqa: E501
        """UdrInfo - a model defined in OpenAPI

        :param group_id: The group_id of this UdrInfo.  # noqa: E501
        :type group_id: str
        :param supi_ranges: The supi_ranges of this UdrInfo.  # noqa: E501
        :type supi_ranges: List[SupiRange]
        :param gpsi_ranges: The gpsi_ranges of this UdrInfo.  # noqa: E501
        :type gpsi_ranges: List[IdentityRange]
        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this UdrInfo.  # noqa: E501
        :type external_group_identifiers_ranges: List[IdentityRange]
        :param supported_data_sets: The supported_data_sets of this UdrInfo.  # noqa: E501
        :type supported_data_sets: List[DataSetId]
        """
        self.openapi_types = {
            'group_id': str,
            'supi_ranges': List[SupiRange],
            'gpsi_ranges': List[IdentityRange],
            'external_group_identifiers_ranges': List[IdentityRange],
            'supported_data_sets': List[DataSetId]
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'supi_ranges': 'supiRanges',
            'gpsi_ranges': 'gpsiRanges',
            'external_group_identifiers_ranges': 'externalGroupIdentifiersRanges',
            'supported_data_sets': 'supportedDataSets'
        }

        self._group_id = group_id
        self._supi_ranges = supi_ranges
        self._gpsi_ranges = gpsi_ranges
        self._external_group_identifiers_ranges = external_group_identifiers_ranges
        self._supported_data_sets = supported_data_sets

    @classmethod
    def from_dict(cls, dikt) -> 'UdrInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UdrInfo of this UdrInfo.  # noqa: E501
        :rtype: UdrInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this UdrInfo.


        :return: The group_id of this UdrInfo.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this UdrInfo.


        :param group_id: The group_id of this UdrInfo.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def supi_ranges(self):
        """Gets the supi_ranges of this UdrInfo.


        :return: The supi_ranges of this UdrInfo.
        :rtype: List[SupiRange]
        """
        return self._supi_ranges

    @supi_ranges.setter
    def supi_ranges(self, supi_ranges):
        """Sets the supi_ranges of this UdrInfo.


        :param supi_ranges: The supi_ranges of this UdrInfo.
        :type supi_ranges: List[SupiRange]
        """

        self._supi_ranges = supi_ranges

    @property
    def gpsi_ranges(self):
        """Gets the gpsi_ranges of this UdrInfo.


        :return: The gpsi_ranges of this UdrInfo.
        :rtype: List[IdentityRange]
        """
        return self._gpsi_ranges

    @gpsi_ranges.setter
    def gpsi_ranges(self, gpsi_ranges):
        """Sets the gpsi_ranges of this UdrInfo.


        :param gpsi_ranges: The gpsi_ranges of this UdrInfo.
        :type gpsi_ranges: List[IdentityRange]
        """

        self._gpsi_ranges = gpsi_ranges

    @property
    def external_group_identifiers_ranges(self):
        """Gets the external_group_identifiers_ranges of this UdrInfo.


        :return: The external_group_identifiers_ranges of this UdrInfo.
        :rtype: List[IdentityRange]
        """
        return self._external_group_identifiers_ranges

    @external_group_identifiers_ranges.setter
    def external_group_identifiers_ranges(self, external_group_identifiers_ranges):
        """Sets the external_group_identifiers_ranges of this UdrInfo.


        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this UdrInfo.
        :type external_group_identifiers_ranges: List[IdentityRange]
        """

        self._external_group_identifiers_ranges = external_group_identifiers_ranges

    @property
    def supported_data_sets(self):
        """Gets the supported_data_sets of this UdrInfo.


        :return: The supported_data_sets of this UdrInfo.
        :rtype: List[DataSetId]
        """
        return self._supported_data_sets

    @supported_data_sets.setter
    def supported_data_sets(self, supported_data_sets):
        """Sets the supported_data_sets of this UdrInfo.


        :param supported_data_sets: The supported_data_sets of this UdrInfo.
        :type supported_data_sets: List[DataSetId]
        """

        self._supported_data_sets = supported_data_sets
