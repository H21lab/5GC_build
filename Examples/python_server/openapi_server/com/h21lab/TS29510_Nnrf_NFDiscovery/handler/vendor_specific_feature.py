# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29510_Nnrf_NFDiscovery.handler.base_model_ import Model
from openapi_server import util


class VendorSpecificFeature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_name=None, feature_version=None):  # noqa: E501
        """VendorSpecificFeature - a model defined in OpenAPI

        :param feature_name: The feature_name of this VendorSpecificFeature.  # noqa: E501
        :type feature_name: str
        :param feature_version: The feature_version of this VendorSpecificFeature.  # noqa: E501
        :type feature_version: str
        """
        self.openapi_types = {
            'feature_name': str,
            'feature_version': str
        }

        self.attribute_map = {
            'feature_name': 'featureName',
            'feature_version': 'featureVersion'
        }

        self._feature_name = feature_name
        self._feature_version = feature_version

    @classmethod
    def from_dict(cls, dikt) -> 'VendorSpecificFeature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VendorSpecificFeature of this VendorSpecificFeature.  # noqa: E501
        :rtype: VendorSpecificFeature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_name(self):
        """Gets the feature_name of this VendorSpecificFeature.


        :return: The feature_name of this VendorSpecificFeature.
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this VendorSpecificFeature.


        :param feature_name: The feature_name of this VendorSpecificFeature.
        :type feature_name: str
        """
        if feature_name is None:
            raise ValueError("Invalid value for `feature_name`, must not be `None`")  # noqa: E501

        self._feature_name = feature_name

    @property
    def feature_version(self):
        """Gets the feature_version of this VendorSpecificFeature.


        :return: The feature_version of this VendorSpecificFeature.
        :rtype: str
        """
        return self._feature_version

    @feature_version.setter
    def feature_version(self, feature_version):
        """Sets the feature_version of this VendorSpecificFeature.


        :param feature_version: The feature_version of this VendorSpecificFeature.
        :type feature_version: str
        """
        if feature_version is None:
            raise ValueError("Invalid value for `feature_version`, must not be `None`")  # noqa: E501

        self._feature_version = feature_version
