# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.n32f_error_type import N32fErrorType
from openapi_server import util

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.n32f_error_type import N32fErrorType  # noqa: E501

class FailedModificationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipx_id=None, n32f_error_type=None):  # noqa: E501
        """FailedModificationInfo - a model defined in OpenAPI

        :param ipx_id: The ipx_id of this FailedModificationInfo.  # noqa: E501
        :type ipx_id: str
        :param n32f_error_type: The n32f_error_type of this FailedModificationInfo.  # noqa: E501
        :type n32f_error_type: N32fErrorType
        """
        self.openapi_types = {
            'ipx_id': str,
            'n32f_error_type': N32fErrorType
        }

        self.attribute_map = {
            'ipx_id': 'ipxId',
            'n32f_error_type': 'n32fErrorType'
        }

        self._ipx_id = ipx_id
        self._n32f_error_type = n32f_error_type

    @classmethod
    def from_dict(cls, dikt) -> 'FailedModificationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FailedModificationInfo of this FailedModificationInfo.  # noqa: E501
        :rtype: FailedModificationInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipx_id(self):
        """Gets the ipx_id of this FailedModificationInfo.

        Fully Qualified Domain Name  # noqa: E501

        :return: The ipx_id of this FailedModificationInfo.
        :rtype: str
        """
        return self._ipx_id

    @ipx_id.setter
    def ipx_id(self, ipx_id):
        """Sets the ipx_id of this FailedModificationInfo.

        Fully Qualified Domain Name  # noqa: E501

        :param ipx_id: The ipx_id of this FailedModificationInfo.
        :type ipx_id: str
        """
        if ipx_id is None:
            raise ValueError("Invalid value for `ipx_id`, must not be `None`")  # noqa: E501

        self._ipx_id = ipx_id

    @property
    def n32f_error_type(self):
        """Gets the n32f_error_type of this FailedModificationInfo.


        :return: The n32f_error_type of this FailedModificationInfo.
        :rtype: N32fErrorType
        """
        return self._n32f_error_type

    @n32f_error_type.setter
    def n32f_error_type(self, n32f_error_type):
        """Sets the n32f_error_type of this FailedModificationInfo.


        :param n32f_error_type: The n32f_error_type of this FailedModificationInfo.
        :type n32f_error_type: N32fErrorType
        """
        if n32f_error_type is None:
            raise ValueError("Invalid value for `n32f_error_type`, must not be `None`")  # noqa: E501

        self._n32f_error_type = n32f_error_type
