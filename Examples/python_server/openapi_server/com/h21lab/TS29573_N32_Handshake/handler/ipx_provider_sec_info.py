# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.base_model_ import Model
from openapi_server import util


class IpxProviderSecInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipx_provider_id=None, raw_public_key_list=None, certificate_list=None):  # noqa: E501
        """IpxProviderSecInfo - a model defined in OpenAPI

        :param ipx_provider_id: The ipx_provider_id of this IpxProviderSecInfo.  # noqa: E501
        :type ipx_provider_id: str
        :param raw_public_key_list: The raw_public_key_list of this IpxProviderSecInfo.  # noqa: E501
        :type raw_public_key_list: List[str]
        :param certificate_list: The certificate_list of this IpxProviderSecInfo.  # noqa: E501
        :type certificate_list: List[str]
        """
        self.openapi_types = {
            'ipx_provider_id': str,
            'raw_public_key_list': List[str],
            'certificate_list': List[str]
        }

        self.attribute_map = {
            'ipx_provider_id': 'ipxProviderId',
            'raw_public_key_list': 'rawPublicKeyList',
            'certificate_list': 'certificateList'
        }

        self._ipx_provider_id = ipx_provider_id
        self._raw_public_key_list = raw_public_key_list
        self._certificate_list = certificate_list

    @classmethod
    def from_dict(cls, dikt) -> 'IpxProviderSecInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IpxProviderSecInfo of this IpxProviderSecInfo.  # noqa: E501
        :rtype: IpxProviderSecInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipx_provider_id(self):
        """Gets the ipx_provider_id of this IpxProviderSecInfo.

        Fully Qualified Domain Name  # noqa: E501

        :return: The ipx_provider_id of this IpxProviderSecInfo.
        :rtype: str
        """
        return self._ipx_provider_id

    @ipx_provider_id.setter
    def ipx_provider_id(self, ipx_provider_id):
        """Sets the ipx_provider_id of this IpxProviderSecInfo.

        Fully Qualified Domain Name  # noqa: E501

        :param ipx_provider_id: The ipx_provider_id of this IpxProviderSecInfo.
        :type ipx_provider_id: str
        """
        if ipx_provider_id is None:
            raise ValueError("Invalid value for `ipx_provider_id`, must not be `None`")  # noqa: E501

        self._ipx_provider_id = ipx_provider_id

    @property
    def raw_public_key_list(self):
        """Gets the raw_public_key_list of this IpxProviderSecInfo.


        :return: The raw_public_key_list of this IpxProviderSecInfo.
        :rtype: List[str]
        """
        return self._raw_public_key_list

    @raw_public_key_list.setter
    def raw_public_key_list(self, raw_public_key_list):
        """Sets the raw_public_key_list of this IpxProviderSecInfo.


        :param raw_public_key_list: The raw_public_key_list of this IpxProviderSecInfo.
        :type raw_public_key_list: List[str]
        """

        self._raw_public_key_list = raw_public_key_list

    @property
    def certificate_list(self):
        """Gets the certificate_list of this IpxProviderSecInfo.


        :return: The certificate_list of this IpxProviderSecInfo.
        :rtype: List[str]
        """
        return self._certificate_list

    @certificate_list.setter
    def certificate_list(self, certificate_list):
        """Sets the certificate_list of this IpxProviderSecInfo.


        :param certificate_list: The certificate_list of this IpxProviderSecInfo.
        :type certificate_list: List[str]
        """

        self._certificate_list = certificate_list
