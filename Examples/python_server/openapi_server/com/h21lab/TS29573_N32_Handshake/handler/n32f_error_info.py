# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.failed_modification_info import FailedModificationInfo
from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.n32f_error_detail import N32fErrorDetail
from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.n32f_error_type import N32fErrorType
from openapi_server import util

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.failed_modification_info import FailedModificationInfo  # noqa: E501
from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.n32f_error_detail import N32fErrorDetail  # noqa: E501
from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.n32f_error_type import N32fErrorType  # noqa: E501

class N32fErrorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, n32f_message_id=None, n32f_error_type=None, failed_modification_list=None, error_details_list=None):  # noqa: E501
        """N32fErrorInfo - a model defined in OpenAPI

        :param n32f_message_id: The n32f_message_id of this N32fErrorInfo.  # noqa: E501
        :type n32f_message_id: str
        :param n32f_error_type: The n32f_error_type of this N32fErrorInfo.  # noqa: E501
        :type n32f_error_type: N32fErrorType
        :param failed_modification_list: The failed_modification_list of this N32fErrorInfo.  # noqa: E501
        :type failed_modification_list: List[FailedModificationInfo]
        :param error_details_list: The error_details_list of this N32fErrorInfo.  # noqa: E501
        :type error_details_list: List[N32fErrorDetail]
        """
        self.openapi_types = {
            'n32f_message_id': str,
            'n32f_error_type': N32fErrorType,
            'failed_modification_list': List[FailedModificationInfo],
            'error_details_list': List[N32fErrorDetail]
        }

        self.attribute_map = {
            'n32f_message_id': 'n32fMessageId',
            'n32f_error_type': 'n32fErrorType',
            'failed_modification_list': 'failedModificationList',
            'error_details_list': 'errorDetailsList'
        }

        self._n32f_message_id = n32f_message_id
        self._n32f_error_type = n32f_error_type
        self._failed_modification_list = failed_modification_list
        self._error_details_list = error_details_list

    @classmethod
    def from_dict(cls, dikt) -> 'N32fErrorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The N32fErrorInfo of this N32fErrorInfo.  # noqa: E501
        :rtype: N32fErrorInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def n32f_message_id(self):
        """Gets the n32f_message_id of this N32fErrorInfo.


        :return: The n32f_message_id of this N32fErrorInfo.
        :rtype: str
        """
        return self._n32f_message_id

    @n32f_message_id.setter
    def n32f_message_id(self, n32f_message_id):
        """Sets the n32f_message_id of this N32fErrorInfo.


        :param n32f_message_id: The n32f_message_id of this N32fErrorInfo.
        :type n32f_message_id: str
        """
        if n32f_message_id is None:
            raise ValueError("Invalid value for `n32f_message_id`, must not be `None`")  # noqa: E501

        self._n32f_message_id = n32f_message_id

    @property
    def n32f_error_type(self):
        """Gets the n32f_error_type of this N32fErrorInfo.


        :return: The n32f_error_type of this N32fErrorInfo.
        :rtype: N32fErrorType
        """
        return self._n32f_error_type

    @n32f_error_type.setter
    def n32f_error_type(self, n32f_error_type):
        """Sets the n32f_error_type of this N32fErrorInfo.


        :param n32f_error_type: The n32f_error_type of this N32fErrorInfo.
        :type n32f_error_type: N32fErrorType
        """
        if n32f_error_type is None:
            raise ValueError("Invalid value for `n32f_error_type`, must not be `None`")  # noqa: E501

        self._n32f_error_type = n32f_error_type

    @property
    def failed_modification_list(self):
        """Gets the failed_modification_list of this N32fErrorInfo.


        :return: The failed_modification_list of this N32fErrorInfo.
        :rtype: List[FailedModificationInfo]
        """
        return self._failed_modification_list

    @failed_modification_list.setter
    def failed_modification_list(self, failed_modification_list):
        """Sets the failed_modification_list of this N32fErrorInfo.


        :param failed_modification_list: The failed_modification_list of this N32fErrorInfo.
        :type failed_modification_list: List[FailedModificationInfo]
        """

        self._failed_modification_list = failed_modification_list

    @property
    def error_details_list(self):
        """Gets the error_details_list of this N32fErrorInfo.


        :return: The error_details_list of this N32fErrorInfo.
        :rtype: List[N32fErrorDetail]
        """
        return self._error_details_list

    @error_details_list.setter
    def error_details_list(self, error_details_list):
        """Sets the error_details_list of this N32fErrorInfo.


        :param error_details_list: The error_details_list of this N32fErrorInfo.
        :type error_details_list: List[N32fErrorDetail]
        """

        self._error_details_list = error_details_list
