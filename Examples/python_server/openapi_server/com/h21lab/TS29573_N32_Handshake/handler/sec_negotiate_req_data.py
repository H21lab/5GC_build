# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.security_capability import SecurityCapability
from openapi_server import util

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.security_capability import SecurityCapability  # noqa: E501

class SecNegotiateReqData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sender=None, supported_sec_capability_list=None):  # noqa: E501
        """SecNegotiateReqData - a model defined in OpenAPI

        :param sender: The sender of this SecNegotiateReqData.  # noqa: E501
        :type sender: str
        :param supported_sec_capability_list: The supported_sec_capability_list of this SecNegotiateReqData.  # noqa: E501
        :type supported_sec_capability_list: List[SecurityCapability]
        """
        self.openapi_types = {
            'sender': str,
            'supported_sec_capability_list': List[SecurityCapability]
        }

        self.attribute_map = {
            'sender': 'sender',
            'supported_sec_capability_list': 'supportedSecCapabilityList'
        }

        self._sender = sender
        self._supported_sec_capability_list = supported_sec_capability_list

    @classmethod
    def from_dict(cls, dikt) -> 'SecNegotiateReqData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SecNegotiateReqData of this SecNegotiateReqData.  # noqa: E501
        :rtype: SecNegotiateReqData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sender(self):
        """Gets the sender of this SecNegotiateReqData.

        Fully Qualified Domain Name  # noqa: E501

        :return: The sender of this SecNegotiateReqData.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this SecNegotiateReqData.

        Fully Qualified Domain Name  # noqa: E501

        :param sender: The sender of this SecNegotiateReqData.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def supported_sec_capability_list(self):
        """Gets the supported_sec_capability_list of this SecNegotiateReqData.


        :return: The supported_sec_capability_list of this SecNegotiateReqData.
        :rtype: List[SecurityCapability]
        """
        return self._supported_sec_capability_list

    @supported_sec_capability_list.setter
    def supported_sec_capability_list(self, supported_sec_capability_list):
        """Sets the supported_sec_capability_list of this SecNegotiateReqData.


        :param supported_sec_capability_list: The supported_sec_capability_list of this SecNegotiateReqData.
        :type supported_sec_capability_list: List[SecurityCapability]
        """
        if supported_sec_capability_list is None:
            raise ValueError("Invalid value for `supported_sec_capability_list`, must not be `None`")  # noqa: E501

        self._supported_sec_capability_list = supported_sec_capability_list
