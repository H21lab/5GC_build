# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.base_model_ import Model
from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.security_capability import SecurityCapability
from openapi_server import util

from openapi_server.com.h21lab.TS29573_N32_Handshake.handler.security_capability import SecurityCapability  # noqa: E501

class SecNegotiateRspData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sender=None, selected_sec_capability=None):  # noqa: E501
        """SecNegotiateRspData - a model defined in OpenAPI

        :param sender: The sender of this SecNegotiateRspData.  # noqa: E501
        :type sender: str
        :param selected_sec_capability: The selected_sec_capability of this SecNegotiateRspData.  # noqa: E501
        :type selected_sec_capability: SecurityCapability
        """
        self.openapi_types = {
            'sender': str,
            'selected_sec_capability': SecurityCapability
        }

        self.attribute_map = {
            'sender': 'sender',
            'selected_sec_capability': 'selectedSecCapability'
        }

        self._sender = sender
        self._selected_sec_capability = selected_sec_capability

    @classmethod
    def from_dict(cls, dikt) -> 'SecNegotiateRspData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SecNegotiateRspData of this SecNegotiateRspData.  # noqa: E501
        :rtype: SecNegotiateRspData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sender(self):
        """Gets the sender of this SecNegotiateRspData.

        Fully Qualified Domain Name  # noqa: E501

        :return: The sender of this SecNegotiateRspData.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this SecNegotiateRspData.

        Fully Qualified Domain Name  # noqa: E501

        :param sender: The sender of this SecNegotiateRspData.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def selected_sec_capability(self):
        """Gets the selected_sec_capability of this SecNegotiateRspData.


        :return: The selected_sec_capability of this SecNegotiateRspData.
        :rtype: SecurityCapability
        """
        return self._selected_sec_capability

    @selected_sec_capability.setter
    def selected_sec_capability(self, selected_sec_capability):
        """Sets the selected_sec_capability of this SecNegotiateRspData.


        :param selected_sec_capability: The selected_sec_capability of this SecNegotiateRspData.
        :type selected_sec_capability: SecurityCapability
        """
        if selected_sec_capability is None:
            raise ValueError("Invalid value for `selected_sec_capability`, must not be `None`")  # noqa: E501

        self._selected_sec_capability = selected_sec_capability
